#!/bin/bash
set -e

# ================================================================================================
# Nexus 一键部署脚本 - v11.0.0 - 终结版
#
# 改版者: AI
#
# 【V11.0.0 - 终结版】:
#   - 【最终解决方案】: 此脚本被重写为一个不可中断的一键部署工具，彻底抛弃了可能
#     导致缓存问题的菜单系统。
#   - 【焦土与重建】: 脚本会首先强制、彻底地清理所有旧的、相关的Docker资源和配置，
#     然后使用一个全新的镜像Tag ('v11-the-end') 强制Docker从零开始构建一个100%正确
#     的镜像，从根源上消灭所有缓存问题。
#   - 【集成所有修复】: 包含了所有经过验证的修复方案（Debian基础、节点自动注册、
#     以及最关键的后台启动模式）。
#
#   【用法】: 1. 修改下方配置。 2. chmod +x install.sh。 3. ./install.sh
# ================================================================================================

# --- 用户配置 ---
NODE_ID="35688699" # <--- 请确认这是您要安装的节点ID
WALLET_ADDRESS="0x62250580AeC82545bD5c3133c4e293780391813c" # <--- 请确认这是您的钱包地址

# --- 系统配置 (通常无需修改) ---
SCRIPT_VERSION="v11.0.0 - 一键终结版"
NEXUS_CLI_VERSION="v0.10.8"
BASE_CONTAINER_NAME="nexus-node"
IMAGE_NAME="nexus-node:v11-the-end" # 全新的TAG，强制摧毁缓存
BUILDER_NAME="nexus_builder"
HOST_CONFIG_DIR="/root/nexus_config"
NODE_CPU_LIMIT="0"
NODE_MEM_LIMIT="0"
COLOR_RESET='\033[0m'; COLOR_RED='\033[0;31m'; COLOR_GREEN='\033[0;32m'; COLOR_YELLOW='\033[0;33m';
COLOR_BLUE='\033[0;34m'; COLOR_CYAN='\033[0;36m'; COLOR_BOLD='\033[1m'

# --- 核心函数 ---
print_color() { echo -e "${2}${1}${COLOR_RESET}"; }
print_success() { print_color "$1" "$COLOR_GREEN"; }
print_error() { print_color "$1" "$COLOR_RED"; }
print_warning() { print_color "$1" "$COLOR_YELLOW"; }
print_info() { print_color "$1" "$COLOR_CYAN"; }
print_bold() { print_color "$1" "${COLOR_BOLD}${COLOR_CYAN}"; }

main() {
    print_bold "===== Nexus 一键部署脚本 ${SCRIPT_VERSION} ====="
    
    # --- 步骤 1: 焦土策略 - 彻底清理 ---
    print_bold "\n第一阶段: 焦土策略 - 彻底清理所有旧的残留物..."
    docker stop $(docker ps -a -q --filter "name=${BASE_CONTAINER_NAME}") &>/dev/null || true
    docker rm -f $(docker ps -a -q --filter "name=${BASE_CONTAINER_NAME}") &>/dev/null || true
    print_info "已停止并移除所有旧的节点容器。"
    docker rmi -f $(docker images -q "nexus-node*") &>/dev/null || true
    print_info "已移除所有名为 'nexus-node' 的旧镜像。"
    docker buildx rm -f "$BUILDER_NAME" &>/dev/null || true
    print_info "已移除旧的 buildx 构建器。"
    rm -rf "$HOST_CONFIG_DIR"
    print_info "已删除旧的配置文件目录。"
    print_success "焦土策略执行完毕！环境已净化。"

    # --- 步骤 2: 环境准备 ---
    print_bold "\n第二阶段: 系统环境准备..."
    if ! ping -c 1 -W 3 8.8.8.8 &>/dev/null; then print_error "!! 致命网络错误。部署中止。"; exit 1; fi
    print_success "网络正常。"
    if ! docker info >/dev/null 2>&1; then print_error "!! Docker 未运行。部署中止。"; exit 1; fi
    print_success "Docker已在运行。"
    
    # --- 步骤 3: 构建最终正确的镜像 ---
    print_bold "\n第三阶段: 强制重建 - 构建终极版节点镜像..."
    docker run --rm --privileged tonistiigi/binfmt --install all &>/dev/null
    docker buildx create --name "$BUILDER_NAME" --driver docker-container --bootstrap >/dev/null 2>&1 || true
    docker buildx use "$BUILDER_NAME"
    print_info "跨平台模拟环境已就绪。"

    TMP_WORKDIR=$(mktemp -d); cd "$TMP_WORKDIR"
    cli_url="https://github.com/nexus-xyz/nexus-cli/releases/download/${NEXUS_CLI_VERSION}/nexus-network-linux-arm64"
    
    cat > Dockerfile <<EOF
FROM --platform=linux/arm64 debian:bookworm-slim
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates curl procps libc6 libssl3 wget net-tools iproute2 && rm -rf /var/lib/apt/lists/*
ADD ${cli_url} /usr/local/bin/nexus-network
RUN chmod +x /usr/local/bin/nexus-network && ln -s /usr/local/bin/nexus-network /usr/local/bin/nexus-cli
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
VOLUME /root/.nexus
ENTRYPOINT ["/entrypoint.sh"]
HEALTHCHECK --interval=1m --timeout=10s --retries=3 CMD pgrep -f 'nexus-network start --node-id' >/dev/null || exit 1
EOF

    cat > entrypoint.sh <<'EOF'
#!/bin/bash
set -e
if [ "$1" = "nexus-cli" ] || [ "$1" = "nexus-network" ] || [ -x "$(command -v "$1")" ]; then
    exec "$@"
else
    if [ -z "$NODE_ID" ]; then
        echo "错误: 未设置NODE_ID环境变量用于启动节点!" >&2; exit 1
    fi
    exec nexus-network start --node-id "$NODE_ID"
fi
EOF

    print_info "正在为 arm64 平台构建全新镜像 '$IMAGE_NAME'..."
    if ! docker buildx build --platform linux/arm64 --builder "$BUILDER_NAME" -t "$IMAGE_NAME" . --load; then
      print_error "!! 镜像构建失败。部署中止。"; exit 1;
    fi
    print_success "终极版镜像构建成功！"
    cd / && rm -rf "$TMP_WORKDIR"

    # --- 步骤 4: 自动注册 ---
    print_bold "\n第四阶段: 全自动注册..."
    mkdir -p "$HOST_CONFIG_DIR"
    print_info "正在注册用户: ${WALLET_ADDRESS}..."
    if ! docker run --rm --platform linux/arm64 -v "${HOST_CONFIG_DIR}:/root/.nexus" "${IMAGE_NAME}" \
      nexus-cli register-user --wallet-address "${WALLET_ADDRESS}"; then
        print_error "!! 用户注册失败！部署中止。"; rm -rf "${HOST_CONFIG_DIR}"; exit 1
    fi
    print_success "用户注册成功！"
    
    print_info "正在注册节点: ${NODE_ID}..."
    if ! docker run --rm --platform linux/arm64 -v "${HOST_CONFIG_DIR}:/root/.nexus" "${IMAGE_NAME}" \
      nexus-cli register-node --node-id "${NODE_ID}"; then
        print_error "!! 节点注册失败！部署中止。"; rm -rf "${HOST_CONFIG_DIR}"; exit 1
    fi
    print_success "节点注册成功！"

    # --- 步骤 5: 启动最终节点 ---
    print_bold "\n第五阶段: 启动最终节点..."
    local cname="${BASE_CONTAINER_NAME}-${NODE_ID}"
    local run_opts="-d --name ${cname} --platform linux/arm64 -e NODE_ID=${NODE_ID} -v ${HOST_CONFIG_DIR}:/root/.nexus --restart unless-stopped"
    if [[ "$NODE_MEM_LIMIT" != "0" && -n "$NODE_MEM_LIMIT" ]]; then run_opts+=" --memory=${NODE_MEM_LIMIT}"; fi
    if [[ "$NODE_CPU_LIMIT" != "0" && -n "$NODE_CPU_LIMIT" ]]; then run_opts+=" --cpus=${NODE_CPU_LIMIT}"; fi
    
    print_info "正在以最终配置启动容器 ${cname}..."
    if ! docker run $run_opts "$IMAGE_NAME" &>/dev/null; then
        print_error "!! 容器 '${cname}' 启动失败。部署中止。"; exit 1
    fi
    print_info "等待容器稳定 (15秒)..."
    sleep 15
    
    # --- 最终验证 ---
    if [ -n "$(docker ps -q -f name="^${cname}$")" ]; then
        print_success "\n======================= 部署成功！======================="
        print_info "节点 ${NODE_ID} 已成功启动并正在运行。"
        print_info "您可以随时使用以下命令管理您的节点："
        echo ""
        print_color "查看实时日志: docker logs -f ${cname}" "$COLOR_YELLOW"
        print_color "停止节点:     docker stop ${cname}" "$COLOR_YELLOW"
        print_color "启动节点:     docker start ${cname}" "$COLOR_YELLOW"
        print_color "重启节点:     docker restart ${cname}" "$COLOR_YELLOW"
        echo ""
        print_success "========================================================"
    else
        print_error "\n======================= 部署失败！======================="
        print_warning "节点 ${NODE_ID} 未能保持运行！"
        print_warning "这是容器最后一次崩溃前的日志，请检查："
        docker logs "$cname"
        print_error "========================================================"
        exit 1
    fi
}

main
