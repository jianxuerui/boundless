#!/bin/bash
set -e

# ================================================================================================
# Nexus 多节点管理脚本 (ARM64 Docker) - v5.3 高级网络修复版
#
# 改版者: AI & 社区智慧
#
# 【V5.3 - 高级网络修复版 更新】:
#   - 【高级网络修复】: 彻底重写 'check_network_and_dns' 函数。当检测到DNS问题时，脚本现在会
#     使用 'chattr +i' 命令临时锁定 '/etc/resolv.conf' 文件，以防止 'NetworkManager' 等系统
#     服务覆盖修复。
#   - 【安全回滚】: 增加了全局 'trap' 机制，确保无论脚本如何退出，被锁定的 '/etc/resolv.conf'
#     文件都会被安全解锁并恢复，杜绝任何系统残留问题。
#   - 【精准诊断】: 采用 'ping' 命令分步检测IP连通性和DNS解析，能更准确地向用户报告网络故障点。
#
# ================================================================================================

# --- 配置项 ---
SCRIPT_VERSION="v5.3 高级网络修复版"
NEXUS_CLI_VERSION="v0.10.7"
BASE_CONTAINER_NAME="nexus-node"
IMAGE_NAME="nexus-node:latest-arm64"
LOG_DIR="/root/nexus_logs"
BUILDER_NAME="nexus_builder"

# --- 颜色定义 ---
COLOR_RESET='\033[0m'; COLOR_RED='\033[0;31m'; COLOR_GREEN='\033[0;32m'; COLOR_YELLOW='\033[0;33m';
COLOR_BLUE='\033[0;34m'; COLOR_CYAN='\033[0;36m'; COLOR_BOLD='\033[1m'

# --- 全局变量和退出陷阱 ---
TMP_WORKDIR=""; RESOLV_LOCKED=0; ORIGINAL_RESOLV_ATTRS=""
cleanup() {
    EXITCODE=$?
    printf "\n"
    print_info "Executing cleanup..."
    if [ "$RESOLV_LOCKED" -eq 1 ]; then
        print_info "Restoring /etc/resolv.conf..."
        if [ -f /etc/resolv.conf.bak.nexus ]; then
            chattr -i /etc/resolv.conf 2>/dev/null || true
            mv /etc/resolv.conf.bak.nexus /etc/resolv.conf
            # Restore original attributes if they existed
            if [ -n "$ORIGINAL_RESOLV_ATTRS" ]; then
                chattr "$ORIGINAL_RESOLV_ATTRS" /etc/resolv.conf 2>/dev/null || true
            fi
            print_success "/etc/resolv.conf restored."
        fi
    fi
    [ -n "$TMP_WORKDIR" ] && [ -d "$TMP_WORKDIR" ] && rm -rf "$TMP_WORKDIR"
    exit $EXITCODE
}
trap cleanup EXIT HUP INT QUIT TERM

# --- 辅助函数 ---
print_color() { echo -e "${2}${1}${COLOR_RESET}"; }; print_success() { print_color "$1" "$COLOR_GREEN"; }
print_error() { print_color "$1" "$COLOR_RED"; }; print_warning() { print_color "$1" "$COLOR_YELLOW"; }
print_info() { print_color "$1" "$COLOR_CYAN"; }; print_bold() { print_color "$1" "${COLOR_BOLD}${COLOR_CYAN}"; }
safe_sleep() { read -t "$1" < /dev/null 2>/dev/null || true; }
confirm_action() { read -rp "${COLOR_YELLOW}>>> ${1} (y/N): ${COLOR_RESET}" c; [[ "$c" =~ ^[yY]([eE][sS])?$ ]]; }

# ---【V5.3 全新网络修复函数】---
check_network_and_dns() {
    print_info "正在进行高级网络诊断..."
    
    # 1. 检查IP连通性 (Gateway / Firewall)
    if ! ping -c 1 -W 3 8.8.8.8 &>/dev/null; then
        print_error "!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 致命网络错误 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
        print_error "   无法 PING 通外部IP (8.8.8.8)。这不是DNS问题！"
        print_error "   可能原因: "
        print_error "   1. 机器网络配置错误 (IP, 子网掩码, 网关)。"
        print_error "   2. 物理网络不通或虚拟网卡未连接。"
        print_error "   3. 服务器提供商的安全组/ACL或公司防火墙阻止了所有出站流量。"
        print_error "   请先解决底层的网络连接问题。脚本无法继续。"
        print_error "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"; exit 1;
    fi
    print_success "IP连通性正常。"

    # 2. 检查DNS解析
    if ping -c 1 -W 3 google.com &>/dev/null; then
        print_success "DNS解析正常。"
        return 0
    fi

    print_warning "检测到DNS解析失败！将尝试高级修复..."
    if ! command -v chattr &>/dev/null; then
        print_error "!! 关键命令 'chattr' 不存在，无法执行高级网络修复。"; exit 1;
    fi

    # 3. 执行强制DNS修复
    print_info "为了防止系统覆盖，将临时锁定DNS配置文件..."
    if [ ! -w /etc/resolv.conf ]; then
        # Check attributes if not writable
        ORIGINAL_RESOLV_ATTRS=$(lsattr /etc/resolv.conf | awk '{print $1}')
        if [[ "$ORIGINAL_RESOLV_ATTRS" == *i* ]]; then
             print_info "发现 /etc/resolv.conf 已被锁定，将临时解锁..."
             chattr -i /etc/resolv.conf
        fi
        if [ ! -w /etc/resolv.conf ]; then
             print_error "!! DNS配置文件 /etc/resolv.conf 无法写入，且解锁失败。请检查权限。"; exit 1;
        fi
    fi
    
    # 备份并写入新的配置
    cp /etc/resolv.conf /etc/resolv.conf.bak.nexus
    cat > /etc/resolv.conf << EOF
nameserver 8.8.8.8
nameserver 1.1.1.1
options edns0
EOF
    # 锁定文件
    chattr +i /etc/resolv.conf
    RESOLV_LOCKED=1
    print_success "/etc/resolv.conf 已临时配置并锁定。"

    # 4. 最终验证
    print_info "再次验证DNS解析..."
    safe_sleep 1
    if ! ping -c 1 -W 3 google.com &>/dev/null; then
        print_error "!!!!!!!!!!!!!!!!!!!!!! 高级网络修复失败 !!!!!!!!!!!!!!!!!!!!!!!";
        print_error "   强制设置DNS后依然无法解析域名！"
        print_error "   这极有可能是因为您的网络防火墙阻止了向外的DNS查询 (UDP端口 53)。"
        print_error "   请联系您的网络管理员或云服务商，放行DNS端口。"
        print_error "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!";
        # cleanup will handle unlocking
        exit 1;
    fi

    print_success "高级网络修复成功！脚本将在此环境下继续执行。"
}


# --- Core Functions ---
check_core_utils() {
    print_info "正在执行系统核心组件健全性检查...";
    local packages_to_reinstall=();
    if command -v apt-get &>/dev/null; then packages_to_reinstall=("coreutils" "ca-certificates");
    elif command -v yum &>/dev/null || command -v dnf &>/dev/null; then packages_to_reinstall=("coreutils" "ca-certificates" "e2fsprogs"); # e2fsprogs for chattr
    fi
    declare -A utils_map; utils_map=( ["grep"]="grep" ["wget"]="wget" ["curl"]="curl" ["chattr"]="chattr" ["ping"]="ping" )
    local broken_utils=()
    for util in "${!utils_map[@]}"; do if command -v "$util" &>/dev/null && ! "$util" --version &>/dev/null 2>&1 && ! "$util" -V &>/dev/null 2>&1; then broken_utils+=("$util"); fi; done

    if [ ${#broken_utils[@]} -gt 0 ]; then
        print_error "!! 致命系统错误: 检测到核心命令 (${broken_utils[*]}) 已损坏。"; exit 1
    fi
    print_success "核心组件检查通过。"
}

ensure_docker_ready() {
    print_info "正在检查并准备 Docker 环境..."
    if docker info >/dev/null 2>&1; then print_success "Docker 环境已就绪且运行正常。"; return 0; fi

    if ! command -v docker &> /dev/null; then
        print_warning "Docker 未安装，正在尝试自动安装..."; if [ -f /etc/os-release ]; then . /etc/os-release; OS_ID=$ID; else print_error "!! 无法检测到操作系统类型。"; exit 1; fi

        case "$OS_ID" in
            ubuntu|debian)
                print_info "检测到 Debian/Ubuntu 系统，使用 apt-get 安装..."
                apt-get update -qq >/dev/null
                apt-get install -y --no-install-recommends apt-transport-https ca-certificates curl gnupg lsb-release >/dev/null
                mkdir -p /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
                apt-get update -qq >/dev/null
                apt-get install -y --no-install-recommends docker-ce docker-ce-cli containerd.io docker-buildx-plugin >/dev/null
                ;;
            centos|rhel|fedora|rocky|almalinux)
                print_info "检测到 RHEL/CentOS/Fedora 系统，使用 yum/dnf 安装..."
                if command -v dnf &>/dev/null; then PKG_MANAGER="dnf"; else PKG_MANAGER="yum"; fi
                $PKG_MANAGER install -y yum-utils >/dev/null
                yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo >/dev/null
                $PKG_MANAGER install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin >/dev/null
                ;;
            *) print_error "!! 不支持的操作系统: $OS_ID。"; exit 1;;
        esac
        print_info "正在启动并启用 Docker 服务..."; systemctl start docker && systemctl enable docker; safe_sleep 3
    fi

    if ! docker info >/dev/null 2>&1; then
        print_warning "Docker 服务未运行，正在尝试启动..."
        if systemctl start docker; then print_success "Docker 服务启动成功。"; safe_sleep 3;
        else print_error "!! 尝试启动 Docker 服务失败: journalctl -u docker.service"; exit 1; fi
    fi
    if ! docker info >/dev/null 2>&1; then print_error "!! 致命错误: Docker 服务仍然无法访问。"; exit 1; fi
    if ! docker buildx version &>/dev/null; then print_error "!! Docker buildx 插件缺失！"; exit 1; fi
    print_success "Docker 环境准备就绪。"
}

setup_buildx() {
    print_info "正在检查和配置 Buildx builder '$BUILDER_NAME'..."
    print_info "正在检查和配置多架构构建所需的 binfmt 支持..."
    if ! docker image inspect tonistiigi/binfmt:latest &>/dev/null; then
        print_info "正在拉取 'tonistiigi/binfmt' 镜像..."
        if ! docker pull tonistiigi/binfmt:latest; then print_error "!! 拉取 'tonistiigi/binfmt' 镜像失败。"; exit 1; fi
    fi

    local binfmt_check_output
    if ! binfmt_check_output=$(docker run --rm --privileged tonistiigi/binfmt:latest --print 2>/dev/null); then
        print_error "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 致命错误 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"; print_error "   无法通过特权容器与系统内核交互, 通常是 AppArmor/SELinux 安全策略导致。"
        print_error "--------------------------- 【首选】一键修复方案 ---------------------------"
        if command -v apt-get &>/dev/null; then print_warning "   对于 Ubuntu/Debian 系统 (检测到 AppArmor):"; print_error "   ${COLOR_CYAN}sudo apt-get install apparmor-utils -y && sudo aa-complain /etc/apparmor.d/docker${COLOR_RESET}";
        elif command -v yum &>/dev/null || command -v dnf &>/dev/null; then print_warning "   对于 CentOS/RHEL 系统 (可能是 SELinux):"; print_error "   ${COLOR_CYAN}sudo setenforce 0 && sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config${COLOR_RESET}"; fi
        print_error "\n   执行完上述对应命令后，请【重新运行本脚本】。"
        print_error "--------------------------------------------------------------------------"
        print_warning "\n【最终建议】: 如果 '一键修复方案' 仍然无效，强烈建议【重装操作系统】。"
        print_error "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"; exit 1
    fi
    if [[ "$binfmt_check_output" != *"supported"* ]]; then print_error "Binfmt 支持配置异常，请参照【最终建议】。"; exit 1; fi
    print_success "Binfmt 支持已正确配置。"

    if docker buildx ls | grep -q "^${BUILDER_NAME}"; then docker buildx rm --force "$BUILDER_NAME" >/dev/null 2>&1 || true; fi
    if ! docker buildx create --name "$BUILDER_NAME" --driver docker-container --bootstrap --use >/dev/null 2>&1; then print_error "!! Buildx builder '$BUILDER_NAME' 创建失败！"; exit 1; fi
    print_success "Buildx builder '$BUILDER_NAME' 已成功创建并设置为默认。"
}

build_image() {
    if [[ -z "$1" ]] && docker image inspect "$IMAGE_NAME" &>/dev/null; then print_info "镜像 '$IMAGE_NAME' 已存在，跳过构建。"; return; fi
    setup_buildx; TMP_WORKDIR=$(mktemp -d); cd "$TMP_WORKDIR"
    cli_url="https://github.com/nexus-xyz/nexus-cli/releases/download/${NEXUS_CLI_VERSION}/nexus-network-linux-arm64"
    print_info "正在生成 Dockerfile..."
    cat > Dockerfile <<EOF
FROM --platform=linux/arm64 ubuntu:24.04
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends curl screen ca-certificates && rm -rf /var/lib/apt/lists/*
RUN curl -L -o /usr/local/bin/nexus-network ${cli_url} && chmod +x /usr/local/bin/nexus-network
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
VOLUME /root/.nexus
EOF
    cat > entrypoint.sh <<'EOF'
#!/bin/bash
set -e
if [ -z "$NODE_ID" ]; then echo "Error: NODE_ID not set!" >&2; exit 1; fi
mkdir -p /root/.nexus && echo "$NODE_ID" > /root/.nexus/node-id
LOG_FILE="/root/nexus.log"
SESSION="nexus_${NODE_ID}"
echo "Starting Nexus node $NODE_ID in screen session $SESSION..."
screen -dmS "$SESSION" bash -c "nexus-network start --node-id \$NODE_ID | tee \$LOG_FILE"
sleep 2
if ! screen -ls | grep -q "$SESSION"; then echo "!!! Node startup failed. Check log: $LOG_FILE" >&2; cat "$LOG_FILE" >&2; exit 1; fi
echo "Node $NODE_ID started successfully."
tail -f /dev/null
EOF
    print_info "正在构建镜像 '$IMAGE_NAME'..."
    if ! docker buildx build --builder "$BUILDER_NAME" -t "$IMAGE_NAME" . --load; then print_error "!! Docker buildx build 失败。"; exit 1; fi
    print_success "镜像 '$IMAGE_NAME' 构建完成。"
}

# --- 其他管理函数 (无改动) ---
run_container() {
    local node_id="$1"; [ -z "$node_id" ] && { print_error "Node ID is required."; return 1; }
    local cname="${BASE_CONTAINER_NAME}-${node_id}"; if [ -n "$(docker ps -a -q -f name="^${cname}$")" ]; then docker stop "$cname" &>/dev/null || true; docker rm "$cname" &>/dev/null || true; fi
    mkdir -p "$LOG_DIR"; local log_file="${LOG_DIR}/nexus-${node_id}.log"; touch "$log_file"
    print_info "正在启动节点 ${node_id}..."
    if ! docker run -d --name "$cname" -v "${log_file}:/root/nexus.log" -e NODE_ID="$node_id" --restart unless-stopped "$IMAGE_NAME" &>/dev/null; then print_error "!! 容器 '${cname}' 启动失败。"; return 1; fi
    safe_sleep 3
    if [ -n "$(docker ps -q -f name="^${cname}$")" ]; then print_success "节点 $node_id 启动成功。日志: $log_file"; else print_error "节点 $node_id 启动后未在运行！请检查日志。"; cat "$log_file"; fi
}
stop_node() { local cname="${BASE_CONTAINER_NAME}-${1}"; if [ -n "$(docker ps -q -f name="^${cname}$")" ]; then docker stop "$cname" &>/dev/null && print_success "节点 ${1} 已停止。"; else print_info "节点 ${1} 已是停止状态或不存在。"; fi; }
start_node() { local cname="${BASE_CONTAINER_NAME}-${1}"; if [ -n "$(docker ps -a -q -f name="^${cname}$")" ]; then docker start "$cname" &>/dev/null; safe_sleep 2; if [ -n "$(docker ps -q -f name="^${cname}$")" ]; then print_success "节点 ${1} 已启动。"; fi; else print_error "未找到节点 ${1}。"; fi; }
restart_node() { local cname="${BASE_CONTAINER_NAME}-${1}"; if [ -n "$(docker ps -a -q -f name="^${cname}$")" ]; then docker restart "$cname" &>/dev/null; safe_sleep 2; print_success "节点 ${1} 已重启。"; else print_error "未找到节点 ${1}。"; fi; }
uninstall_node() { local cname="${BASE_CONTAINER_NAME}-${1}"; if [ -n "$(docker ps -a -q -f name="^${cname}$")" ]; then docker stop "$cname" &>/dev/null || true; docker rm "$cname" &>/dev/null || true; fi; rm -f "${LOG_DIR}/nexus-${1}.log"; print_success "节点 ${1} 已卸载。"; }
get_all_node_ids() { docker ps -a --filter "name=${BASE_CONTAINER_NAME}-" --format "{{.Names}}" | sed "s/^${BASE_CONTAINER_NAME}-//" | sort -u; }
view_node_logs() { docker logs -f "${BASE_CONTAINER_NAME}-${1}"; }

list_nodes() {
    print_color "============================== 当前 Nexus 节点状态 ===============================" "$COLOR_BLUE";
    printf "%-40s %-28s %-12s %-18s\n" "$(print_bold "节点ID(容器名)")" "$(print_bold "状态")" "$(print_bold "CPU")" "$(print_bold "内存")";
    print_color "----------------------------------------------------------------------------------" "$COLOR_BLUE";
    local nodes=$(get_all_node_ids)
    if [ -z "$nodes" ]; then print_warning "未找到任何 Nexus 节点。"; else
        declare -A stats_map
        if [ -n "$(docker ps -q -f name="${BASE_CONTAINER_NAME}-")" ]; then
            local stats_output; stats_output=$(docker stats --no-stream --format "{{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}")
            while IFS=$'\t' read -r name cpu mem; do stats_map["$name"]="$cpu\t$mem"; done <<< "$stats_output"
        fi
        for id in $nodes; do
            local cname="${BASE_CONTAINER_NAME}-${id}"; local status=$(docker ps -a -f name="^${cname}$" --format "{{.Status}}"); local s_color="$COLOR_RED"; local cpu="N/A"; local mem="N/A"
            if [[ "$status" == *"Up"* ]]; then s_color="$COLOR_GREEN"; if [[ -v stats_map["$cname"] ]]; then IFS=$'\t' read -r cpu mem <<< "${stats_map[$cname]}"; fi
            elif [[ "$status" == *"Exited"* ]]; then s_color="$COLOR_YELLOW"; fi
            printf "%-40s %-28s %-12s %-18s\n" "$id ($cname)" "$(print_color "$status" "$s_color")" "$cpu" "$mem"
        done
    fi
    print_color "==================================================================================" "$COLOR_BLUE";
}

# --- 菜单函数 (无改动) ---
select_node_action() { local action_callback="$1"; local prompt_message="$2"; local nodes=($(get_all_node_ids)); if [ ${#nodes[@]} -eq 0 ]; then print_warning "无节点可操作。"; read -n 1 -s -r -p "按任意键返回..."; return; fi; echo "选择要'${prompt_message}'的节点:"; for i in "${!nodes[@]}"; do printf "  ${COLOR_CYAN}%d.${COLOR_RESET} %s\n" "$((i+1))" "${nodes[$i]}"; done; read -rp "请输入选项 (0 返回): " choice; if [[ "$choice" =~ ^[1-9][0-9]*$ ]] && [ "$choice" -le ${#nodes[@]} ]; then "$action_callback" "${nodes[$((choice-1))]}"; fi; read -n 1 -s -r -p "按任意键返回..."; }
select_multiple_nodes_action() { local action_callback="$1"; local prompt_message="$2"; local nodes=($(get_all_node_ids)); if [ ${#nodes[@]} -eq 0 ]; then print_warning "无节点可操作。"; read -n 1 -s -r -p "按任意键返回..."; return; fi; echo "选择要'${prompt_message}'的节点(多选用空格; 'all'全选):"; for i in "${!nodes[@]}"; do printf "  ${COLOR_CYAN}%d.${COLOR_RESET} %s\n" "$((i+1))" "${nodes[$i]}"; done; read -rp "请输入选项 (0 返回): " choices_str; if [ "$choices_str" = "0" ] || [ -z "$choices_str" ]; then return; fi; local selected=(); if [ "$choices_str" = "all" ]; then selected=("${nodes[@]}"); else for c in $choices_str; do if [[ "$c" =~ ^[1-9][0-9]*$ ]] && [ "$c" -le ${#nodes[@]} ]; then selected+=("${nodes[$((c-1))]}"); fi; done; fi; if [ ${#selected[@]} -gt 0 ] && confirm_action "确认'${prompt_message}'选中的 ${#selected[@]} 个节点?"; then for id in "${selected[@]}"; do "$action_callback" "$id"; done; print_success "批量操作完成。"; fi; read -n 1 -s -r -p "按任意键返回..."; }
menu_install_single() { read -rp "请输入要安装的 Node ID: " id; id=$(echo "$id"|xargs); if [ -n "$id" ]; then build_image; run_container "$id"; else print_warning "ID 无效。"; fi; read -n 1 -s -r -p "按任意键返回..."; }
menu_batch_install() { build_image; print_info "请输入多个Node ID(每行一个,空行结束):"; local ids=(); while read -r line && [ -n "$line" ]; do ids+=("$line"); done; if [ ${#ids[@]} -gt 0 ] && confirm_action "确认安装 ${#ids[@]} 个新节点?"; then for id in "${ids[@]}"; do run_container "$id"; done; fi; read -n 1 -s -r -p "按任意键返回..."; }
menu_update() { while true; do clear; print_color "===== 系统维护与更新 =====" "$COLOR_BLUE"; echo " 1. 强制重构镜像"; echo " 2. 更新所有运行中节点"; echo " 3. 清理所有数据"; echo " 0. 返回"; read -rp "请输入选项: " choice; case $choice in 1) build_image "--force";; 2) if confirm_action "确认更新所有运行中节点?"; then build_image "--force"; for id in $(docker ps --filter "name=${BASE_CONTAINER_NAME}-" --format "{{.Names}}" | sed "s/^${BASE_CONTAINER_NAME}-//"); do run_container "$id"; done; fi;; 3) if confirm_action "【警告】将删除所有节点、镜像、日志和builder！确定吗?"; then docker rm -f $(docker ps -a -q --filter "name=${BASE_CONTAINER_NAME}-") >/dev/null 2>&1 || true; if docker image inspect "$IMAGE_NAME" &>/dev/null; then docker rmi -f "$IMAGE_NAME"; fi; if docker buildx ls | grep -q "$BUILDER_NAME"; then docker buildx rm -f "$BUILDER_NAME"; fi; print_success "清理完成。"; fi;; 0) break;; *) print_error "无效选项。";; esac; read -n 1 -s -r -p "按任意键返回..."; done; }

# --- 主入口 ---
main_menu() {
    if [ "$(id -u)" -ne 0 ]; then print_error "错误: 脚本需要root权限运行。"; exit 1; fi
    check_core_utils
    check_network_and_dns
    ensure_docker_ready
    while true; do
        clear; print_color "===== Nexus 管理脚本 ${SCRIPT_VERSION} =====" "$COLOR_BLUE"; list_nodes;
        echo; print_info "--- 节点管理 ---";
        echo " 1. 安装/启动单节点   4. 停止节点"; echo " 2. 查看节点日志     5. 启动节点"; echo " 3. 卸载节点         6. 重启节点";
        print_info "--- 批量操作 ---";
        echo " 7. 批量安装新节点   10. 批量卸载"; echo " 8. 批量停止节点      9. 批量启动";
        print_info "--- 系统维护 ---";
        echo " 11. 更新与维护"; echo "  0. 退出脚本"; echo
        read -rp "请输入选项: " choice
        case $choice in
            1) menu_install_single ;; 2) select_node_action view_node_logs "查看日志" ;; 3) select_node_action uninstall_node "卸载" ;;
            4) select_node_action stop_node "停止" ;; 5) select_node_action start_node "启动" ;; 6) select_node_action restart_node "重启" ;;
            7) menu_batch_install ;; 8) select_multiple_nodes_action stop_node "停止" ;; 9) select_multiple_nodes_action start_node "启动" ;;
            10) select_multiple_nodes_action uninstall_node "卸载" ;; 11) menu_update ;; 0) exit 0 ;; *) print_error "无效选项。" && safe_sleep 1 ;;
        esac
    done
}

main_menu
