#!/bin/bash

#================================================================================
# Nexus Network (ARM64) 魔改管理脚本 v3.0
#
# 功能:
#   - 专门用于在 ARM64 架构上安装 nexus-network
#   - 在 x86_64 架构上运行时会给出明确错误提示并阻止安装
#   - 将其注册为 systemd 服务进行管理 (仅限ARM64)
#   - 提供完整的服务管理功能和一键卸载
#
# 作者: Your Name/AI Assistant
# 版本: 3.0
#================================================================================

# --- 全局变量定义 ---
# 唯一的、有效的下载链接
readonly URL="https://github.com/nexus-xyz/nexus-cli/releases/download/v0.10.8/nexus-network-linux-arm64"
readonly REQUIRED_ARCH="aarch64" # 此程序唯一支持的架构
DETECTED_ARCH=""

# 固定变量
readonly BINARY_NAME="nexus-network"
readonly INSTALL_DIR="/usr/local/bin"
readonly CONFIG_DIR="/etc/nexus-network"
readonly SERVICE_NAME="nexus-network"
readonly SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
readonly RUN_USER="nexus-user"

# --- 颜色定义 ---
readonly C_RED='\033[0;31m'
readonly C_GREEN='\033[0;32m'
readonly C_YELLOW='\033[0;33m'
readonly C_BLUE='\033[0;34m'
readonly C_NC='\033[0m' # No Color

# --- 辅助函数 ---

# 打印信息
_log() {
    local color="$1"
    local message="$2"
    echo -e "${color}${message}${C_NC}"
}

# 暂停脚本，等待用户按回车键
pause() {
    read -rp "按 [Enter] 键返回菜单..."
}

# 检查是否以 root 用户身份运行
check_root() {
    if [[ "$(id -u)" -ne 0 ]]; then
        _log "$C_RED" "错误: 此脚本必须以 root 权限运行。请使用 'sudo'。"
        exit 1
    fi
}

# 检查环境，特别是CPU架构
check_env() {
    DETECTED_ARCH=$(uname -m)

    # 检查操作系统
    if ! grep -q -i "centos stream release 8" /etc/centos-release; then
        _log "$C_RED" "警告: 此脚本专为 CentOS 8 设计。您的系统可能不兼容。"
    fi
}

# 检查服务是否已安装
is_installed() {
    if [[ -f "$SERVICE_FILE" ]] || [[ -f "${INSTALL_DIR}/${BINARY_NAME}" ]]; then
        return 0 # 已安装
    else
        return 1 # 未安装
    fi
}

# --- 核心功能函数 ---

# 1. 安装 Nexus Network
install_nexus() {
    _log "$C_BLUE" "--- 开始安装 Nexus Network ---"
    
    # 核心检查：在安装开始时验证架构
    if [[ "$DETECTED_ARCH" != "$REQUIRED_ARCH" ]]; then
        _log "$C_RED" "!!!!!!!!!!!!!!!!!!!!!!!! 安装失败 !!!!!!!!!!!!!!!!!!!!!!!!"
        _log "$C_YELLOW" "您的系统架构是 '${DETECTED_ARCH}', 但 'nexus-network' v0.10.8"
        _log "$C_YELLOW" "官方只提供了 '${REQUIRED_ARCH}' (ARM64) 架构的预编译文件。"
        _log "$C_YELLOW" "我们无法下载适用于您系统的版本，因为它不存在。"
        _log "$C_BLUE" "建议:"
        _log "$C_BLUE" "  1. 在一台 ARM64 架构的服务器上运行此脚本。"
        _log "$C_BLUE" "  2. 前往项目 GitHub 页面查看是否有其他版本支持 x86_64。"
        _log "$C_BLUE" "  3. 尝试从源代码自行编译 (高级操作)。"
        _log "$C_RED" "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        return
    fi

    if is_installed; then
        _log "$C_YELLOW" "检测到 Nexus Network 已安装。如果需要重新安装，请先卸载。"
        return
    fi

    # ... 后续安装步骤 (只有在ARM64上才会执行)
    
    _log "$C_BLUE" "[1/7] 正在安装依赖 (wget)..."
    dnf install -y wget > /dev/null 2>&1
    
    _log "$C_BLUE" "[2/7] 正在创建系统用户 '${RUN_USER}'..."
    if ! id -u "${RUN_USER}" >/dev/null 2>&1; then
        useradd -r -m -s /bin/false "${RUN_USER}"
    fi

    _log "$C_BLUE" "[3/7] 正在创建配置目录 '${CONFIG_DIR}'..."
    mkdir -p "${CONFIG_DIR}"
    chown -R "${RUN_USER}:${RUN_USER}" "${CONFIG_DIR}"

    _log "$C_BLUE" "[4/7] 正在从 GitHub 下载二进制文件 (架构: ${DETECTED_ARCH})..."
    wget -O "${INSTALL_DIR}/${BINARY_NAME}" "$URL"
    if [[ $? -ne 0 ]]; then
        _log "$C_RED" "错误: 文件下载失败。请检查网络或链接是否有效。"
        return
    fi
    
    _log "$C_BLUE" "[5/7] 正在设置文件权限..."
    chmod +x "${INSTALL_DIR}/${BINARY_NAME}"

    _log "$C_BLUE" "[6/7] 正在创建 systemd 服务..."
    create_systemd_service

    _log "$C_BLUE" "[7/7] 正在重载 systemd 并设置开机自启..."
    systemctl daemon-reload
    systemctl enable "${SERVICE_NAME}"

    _log "$C_GREEN" "--- Nexus Network 安装成功！ ---"
    _log "$C_YELLOW" "服务已设置为开机自启，但尚未运行。请使用菜单中的 '启动服务' 选项来启动它。"
}

# 创建 systemd 服务文件
create_systemd_service() {
    cat > "$SERVICE_FILE" << EOF
[Unit]
Description=Nexus Network Service
After=network.target

[Service]
Type=simple
User=${RUN_USER}
Group=${RUN_USER}
ExecStart=${INSTALL_DIR}/${BINARY_NAME} --config-dir=${CONFIG_DIR}
Restart=on-failure
RestartSec=10
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
EOF
    _log "$C_GREEN" "systemd 服务文件已创建: ${SERVICE_FILE}"
}

# 卸载及其他服务管理函数 (保持不变) ...

# 2. 卸载 Nexus Network
uninstall_nexus() {
    _log "$C_BLUE" "--- 开始卸载 Nexus Network ---"
    if ! is_installed; then _log "$C_YELLOW" "Nexus Network 未安装。"; return; fi
    read -rp "您确定要完全卸载 Nexus Network 吗？[y/N]: " confirm
    if [[ "${confirm,,}" != "y" ]]; then _log "$C_YELLOW" "卸载操作已取消。"; return; fi
    systemctl stop "${SERVICE_NAME}" >/dev/null 2>&1
    systemctl disable "${SERVICE_NAME}" >/dev/null 2>&1
    rm -f "$SERVICE_FILE"
    systemctl daemon-reload
    rm -f "${INSTALL_DIR}/${BINARY_NAME}"
    read -rp "是否删除配置文件目录 (${CONFIG_DIR}) 和用户 (${RUN_USER})？[y/N]: " confirm_data
    if [[ "${confirm_data,,}" == "y" ]]; then
        rm -rf "${CONFIG_DIR}"
        userdel -r "${RUN_USER}" >/dev/null 2>&1
    fi
    _log "$C_GREEN" "--- Nexus Network 卸载完成 ---"
}

# 3. 启动服务
start_service() {
    if ! is_installed; then _log "$C_RED" "错误: Nexus Network 未安装。"; return; fi
    _log "$C_BLUE" "正在启动 ${SERVICE_NAME} 服务..."
    systemctl start "${SERVICE_NAME}"
    _log "$C_GREEN" "启动命令已发送。"
}

# 4. 停止服务
stop_service() {
    if ! is_installed; then _log "$C_RED" "错误: Nexus Network 未安装。"; return; fi
    _log "$C_BLUE" "正在停止 ${SERVICE_NAME} 服务..."
    systemctl stop "${SERVICE_NAME}"
    _log "$C_GREEN" "服务已停止。"
}

# 5. 重启服务
restart_service() {
    if ! is_installed; then _log "$C_RED" "错误: Nexus Network 未安装。"; return; fi
    _log "$C_BLUE" "正在重启 ${SERVICE_NAME} 服务..."
    systemctl restart "${SERVICE_NAME}"
    _log "$C_GREEN" "重启命令已发送。"
}

# 6. 查看服务状态
status_service() {
    if ! is_installed; then _log "$C_RED" "错误: Nexus Network 未安装。"; return; fi
    _log "$C_BLUE" "--- ${SERVICE_NAME} 服务状态 ---"
    systemctl status "${SERVICE_NAME}"
}

# 7. 查看服务日志
view_logs() {
    if ! is_installed; then _log "$C_RED" "错误: Nexus Network 未安装。"; return; fi
    _log "$C_BLUE" "--- 显示最新的100条日志 (按 'q' 退出) ---"
    journalctl -u "${SERVICE_NAME}" -n 100 --no-pager -f
}

# --- 菜单界面 ---
show_menu() {
    clear
    local arch_color="$C_GREEN"
    if [[ "$DETECTED_ARCH" != "$REQUIRED_ARCH" ]]; then
        arch_color="$C_RED"
    fi

    echo "========================================================"
    echo "       Nexus Network (ARM64) 魔改管理脚本"
    echo -e "  (您的架构: ${arch_color}${DETECTED_ARCH}${C_NC} | 所需架构: ${C_GREEN}${REQUIRED_ARCH}${C_NC})"
    echo "========================================================"
    if is_installed; then
        _log "$C_GREEN" "      状态: 已安装"
    else
        _log "$C_YELLOW" "      状态: 未安装"
    fi
    echo "--------------------------------------------------------"
    echo " 1. 安装 Nexus Network"
    echo " 2. 卸载 Nexus Network"
    echo "--------------------------------------------------------"
    echo " 3. 启动服务          6. 查看服务状态"
    echo " 4. 停止服务          7. 查看实时日志"
    echo " 5. 重启服务"
    echo "--------------------------------------------------------"
    echo " 0. 退出脚本"
    echo "========================================================"
}

# --- 主循环 ---
main() {
    check_root
    check_env
    
    while true; do
        show_menu
        read -rp "请输入选项 [0-7]: " choice

        case "$choice" in
            1) install_nexus; pause ;;
            2) uninstall_nexus; pause ;;
            3) start_service; pause ;;
            4) stop_service; pause ;;
            5) restart_service; pause ;;
            6) status_service; pause ;;
            7 | l) view_logs ;;
            0) _log "$C_BLUE" "感谢使用，脚本已退出。"; exit 0 ;;
            *) _log "$C_RED" "无效的选项，请输入 0-7 之间的数字。"; pause ;;
        esac
    done
}

# --- 脚本入口 ---
main
