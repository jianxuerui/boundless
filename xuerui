#!/bin/bash
set -e

# ==============================================================================
# Nexus 多节点管理脚本 (ARM64专用Docker版)
# 作者: 哈哈哈哈 (推特 @ferdie_jhovie)
# 描述: 此脚本使用 Docker 来管理多个 Nexus 节点，特别为 ARM64 架构优化。
#       它会自动构建包含正确架构二进制文件的 Docker 镜像，并管理容器的
#       生命周期，包括启动、停止、查看日志和批量操作。
# ==============================================================================

# --- 配置项 ---
BASE_CONTAINER_NAME="nexus-node"
IMAGE_NAME="nexus-node:latest-arm64"
LOG_DIR="/root/nexus_logs"

# --- 核心功能函数 ---

# 检查 Docker 是否安装，如果未安装则尝试自动安装
function check_docker() {
    # 此函数检查 Docker 是否存在，并为 Ubuntu/Debian 系统提供安装指引。
    # 对于 ARM 架构的机器（如 Ampere、Oracle ARM、树莓派等），此通用脚本通常有效。
    if ! command -v docker >/dev/null 2>&1; then
        echo "检测到未安装 Docker，正在为您安装..."
        apt-get update
        apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
        add-apt-repository "deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        apt-get update
        apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        systemctl enable docker
        systemctl start docker
        echo "Docker 安装完成！"
    fi
}

# 构建 Docker 镜像
function build_image() {
    # 如果镜像已存在，则跳过构建
    if docker image inspect "$IMAGE_NAME" >/dev/null 2>&1; then
        echo "镜像 $IMAGE_NAME 已存在，跳过构建。"
        return
    fi
    
    echo "正在准备构建环境..."
    WORKDIR=$(mktemp -d)
    cd "$WORKDIR"

    # --- Dockerfile 内容开始 ---
    # 此 Dockerfile 用于创建一个包含 nexus-network 的 ARM64 环境
    cat > Dockerfile <<EOF
# 使用 ARM64 版本的 Ubuntu 作为基础镜像
FROM --platform=linux/arm64 ubuntu:24.04

# 设置环境变量，避免交互式提示
ENV DEBIAN_FRONTEND=noninteractive

# 更新并安装必要的工具
RUN apt-get update && apt-get install -y \
    curl \
    screen \
    bash \
    && rm -rf /var/lib/apt/lists/*

# 【关键修复】
# 不使用 'curl | sh' 安装脚本，因为它可能错误地检测架构。
# 直接从 GitHub Releases 下载指定版本 v0.9.6 的 ARM64 二进制文件。
RUN echo "正在下载 Nexus ARM64 二进制文件..." \
    && curl -L -o /usr/local/bin/nexus-network https://github.com/nexus-xyz/nexus-cli/releases/download/v0.9.6/nexus-network-linux-arm64 \
    && chmod +x /usr/local/bin/nexus-network

# 复制并设置入口点脚本
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# 设置容器启动时执行的命令
ENTRYPOINT ["/entrypoint.sh"]
EOF
    # --- Dockerfile 内容结束 ---

    # --- entrypoint.sh 内容开始 ---
    # 此脚本在容器启动时运行，用于初始化和启动 nexus 节点
    cat > entrypoint.sh <<EOF
#!/bin/bash
set -e

PROVER_ID_FILE="/root/.nexus/node-id"

# 检查 NODE_ID 环境变量是否设置
if [ -z "\$NODE_ID" ]; then
    echo "错误：未通过 -e NODE_ID=... 设置环境变量！"
    exit 1
fi

# 创建配置目录并将 NODE_ID 写入文件
mkdir -p /root/.nexus
echo "\$NODE_ID" > "\$PROVER_ID_FILE"
echo "已将 Node ID 写入文件: \$PROVER_ID_FILE"
echo "使用的 Node ID: \$NODE_ID"

# 检查 nexus-network 命令是否存在
if ! command -v nexus-network >/dev/null 2>&1; then
    echo "错误：nexus-network 命令未在 /usr/local/bin 中找到或不可执行。"
    exit 1
fi

# (可选) 清理旧的 screen 会话，以防容器重启
screen -S nexus -X quit >/dev/null 2>&1 || true

echo "正在启动 nexus-network 节点..."
# 使用 screen 在后台启动节点，并将日志输出到文件
# tee 命令让日志同时输出到文件和标准输出，方便 'docker logs' 查看
screen -dmS nexus bash -c "nexus-network start --node-id \$NODE_ID | tee /root/nexus.log"

sleep 3 # 等待一会，检查启动状态

# 检查 screen 会话是否成功创建
if screen -list | grep -q "nexus"; then
    echo "节点已在后台 screen 会话中成功启动。"
    echo "容器内日志文件路径: /root/nexus.log"
    echo "您可以使用 'docker logs -f \$HOSTNAME' 实时查看日志"
else
    echo "错误：节点启动失败！请检查配置和网络。"
    # 如果启动失败，尝试显示日志文件内容以帮助排查
    if [ -f /root/nexus.log ]; then
        echo "--- 错误日志开始 ---"
        cat /root/nexus.log
        echo "--- 错误日志结束 ---"
    fi
    exit 1
fi

# 保持容器前台运行，并持续输出日志
# 这是 'docker logs -f' 能够持续工作的关键
tail -f /root/nexus.log
EOF
    # --- entrypoint.sh 内容结束 ---

    echo "正在构建 Docker 镜像 $IMAGE_NAME..."
    # 使用 buildx 进行构建，确保平台正确性
    docker buildx build --platform linux/arm64 -t "$IMAGE_NAME" . --load

    echo "清理构建目录..."
    cd - >/dev/null
    rm -rf "$WORKDIR"
    echo "镜像构建完成！"
}

# 启动一个节点容器
function run_container() {
    local node_id=$1
    local container_name="${BASE_CONTAINER_NAME}-${node_id}"
    local log_file="${LOG_DIR}/nexus-${node_id}.log"

    # 如果存在同名容器，先删除
    if docker ps -a --format '{{.Names}}' | grep -qw "$container_name"; then
        echo "检测到旧容器 $container_name，正在删除..."
        docker rm -f "$container_name"
    fi

    # 创建并设置宿主机日志文件
    mkdir -p "$LOG_DIR"
    touch "$log_file"
    chmod 644 "$log_file"

    echo "正在启动容器 $container_name..."
    docker run -d --name "$container_name" \
        -v "$log_file":/root/nexus.log \
        -e NODE_ID="$node_id" \
        --restart unless-stopped \
        "$IMAGE_NAME"
    
    echo "容器 $container_name 已启动！"
    echo "宿主机日志文件位于: $log_file"
    echo "查看实时日志命令: tail -f $log_file  或者  docker logs -f $container_name"
}


# --- 辅助管理函数 ---

# 卸载指定节点
function uninstall_node() {
    local node_id=$1
    local container_name="${BASE_CONTAINER_NAME}-${node_id}"
    local log_file="${LOG_DIR}/nexus-${node_id}.log"

    echo "正在停止并删除容器 $container_name..."
    if docker rm -f "$container_name" >/dev/null 2>&1; then
        echo "容器 $container_name 已删除。"
    else
        echo "容器 $container_name 不存在或已删除。"
    fi

    if [ -f "$log_file" ]; then
        echo "正在删除日志文件 $log_file..."
        rm -f "$log_file"
    fi
    echo "节点 $node_id 的相关资源已卸载。"
}

# 列出所有节点状态
function list_nodes() {
    echo "当前 Nexus 节点状态："
    echo "--------------------------------------------------------------------------------------------"
    printf "%-28s %-12s %-20s %-20s %-s\n" "节点 ID (容器名)" "状态" "CPU %" "内存使用/限制" "日志文件"
    echo "--------------------------------------------------------------------------------------------"
    
    containers=$(docker ps -a --filter "name=${BASE_CONTAINER_NAME}-*" --format "{{.Names}}")

    if [ -z "$containers" ]; then
        echo "未找到任何 Nexus 节点容器。"
    else
        for name in $containers; do
            stats=$(docker stats --no-stream --format "{{.CPUPerc}}\t{{.MemUsage}}" "$name")
            status=$(docker ps -a --filter "name=$name" --format "{{.Status}}")
            node_id=$(echo "$name" | sed "s/${BASE_CONTAINER_NAME}-//")
            log_file="${LOG_DIR}/nexus-${node_id}.log"

            if echo "$status" | grep -q "Up"; then
                cpu_perc=$(echo -e "$stats" | awk '{print $1}')
                mem_usage=$(echo -e "$stats" | awk '{print $2 " " $3 " " $4 " " $5 " " $6}')
                printf "%-28s %-12s %-20s %-20s %-s\n" "$node_id ($name)" "Running" "$cpu_perc" "$mem_usage" "$log_file"
            else
                printf "%-28s %-12s %-20s %-20s %-s\n" "$node_id ($name)" "Stopped" "N/A" "N/A" "$log_file"
            fi
        done
    fi
    echo "--------------------------------------------------------------------------------------------"
}

# 获取所有节点ID（用于选择菜单）
function get_all_node_ids() {
    docker ps -a --filter "name=${BASE_CONTAINER_NAME}-*" --format "{{.Names}}" | sed "s/${BASE_CONTAINER_NAME}-//" | sort -u
}

# 查看指定节点日志
function view_node_logs() {
    local node_id=$1
    local container_name="${BASE_CONTAINER_NAME}-${node_id}"
    
    if ! docker ps -a --format '{{.Names}}' | grep -qw "$container_name"; then
         echo "错误：未找到节点 $node_id 的容器。"
         return 1
    fi
    
    echo "正在显示节点 '$node_id' 的日志... 按 Ctrl+C 退出。"
    sleep 1
    docker logs -f "$container_name"
}

# 批量启动多个节点
function batch_start_nodes() {
    echo "请输入多个 Node ID，每行一个。输入空行或按 Ctrl+D 结束："
    
    local node_ids=()
    while IFS= read -r line; do
        line=$(echo "$line" | xargs) # Trim whitespace
        [ -z "$line" ] && break
        node_ids+=("$line")
    done

    if [ ${#node_ids[@]} -eq 0 ]; then
        echo "未输入任何 Node ID，操作取消。"
        return
    fi

    echo "准备启动 ${#node_ids[@]} 个节点..."
    
    # 统一构建镜像
    build_image

    echo "开始批量启动容器..."
    for node_id in "${node_ids[@]}"; do
        run_container "$node_id"
        sleep 1 # 短暂间隔
    done

    echo "所有节点启动任务已提交！"
}

# 提供一个选择列表供用户操作
function select_node_for_action() {
    local action_callback=$1
    local prompt_message=$2
    
    local all_nodes=($(get_all_node_ids))
    
    if [ ${#all_nodes[@]} -eq 0 ]; then
        echo "当前没有可操作的节点。"
        read -p "按任意键返回..."
        return
    fi

    echo "请选择要'$prompt_message'的节点："
    echo "0. 返回主菜单"
    for i in "${!all_nodes[@]}"; do
        local node_id=${all_nodes[$i]}
        local container_name="${BASE_CONTAINER_NAME}-${node_id}"
        local status=$(docker ps -a --filter "name=$container_name" --format "{{.Status}}")
        printf "%2d. 节点 %-25s [%s]\n" $((i+1)) "$node_id" "$status"
    done

    read -rp "请输入选项 (0-${#all_nodes[@]}): " choice

    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 0 ] || [ "$choice" -gt ${#all_nodes[@]} ]; then
        echo "无效的选项，请重试。"
        sleep 1
        return
    fi

    [ "$choice" -eq 0 ] && return
    
    local selected_node_id=${all_nodes[$((choice-1))]}
    "$action_callback" "$selected_node_id"
}

# --- 占位函数 (TODO) ---

function batch_uninstall_nodes() {
    echo "功能正在实现中..."
    read -p "按任意键返回菜单..."
}

function uninstall_all_nodes_and_image() {
    echo "功能正在实现中..."
    read -p "按任意键返回菜单..."
}

function batch_rotate_nodes() {
    echo "功能正在实现中..."
    read -p "按任意键返回菜单..."
}

# --- 主菜单循环 ---
function main_menu() {
    while true; do
        clear
        echo "脚本由哈哈哈哈编写，推特 @ferdie_jhovie，免费开源，请勿相信收费"
        echo "================ Nexus 多节点管理 (ARM64 Docker版) ================"
        echo "1. 安装/启动单个节点"
        echo "2. 批量安装/启动多个节点"
        echo "3. 显示所有节点状态"
        echo "4. 查看指定节点日志"
        echo "5. 卸载指定节点"
        echo "6. 批量卸载节点 (TODO)"
        echo "7. 卸载所有节点并删除镜像 (TODO)"
        echo "8. 退出脚本"
        echo "================================================================"
        list_nodes
        echo "================================================================"

        read -rp "请输入选项(1-8): " choice

        case $choice in
            1)
                read -rp "请输入您的 Node ID: " NODE_ID
                if [ -z "$NODE_ID" ]; then
                    echo "Node ID 不能为空！"
                else
                    build_image
                    run_container "$NODE_ID"
                fi
                read -p "按任意键返回菜单..."
                ;;
            2)
                batch_start_nodes
                read -p "按任意键返回菜单..."
                ;;
            3)
                # 状态默认显示，此选项可用于手动刷新
                read -p "状态已显示。按任意键返回..."
                ;;
            4)
                select_node_for_action "view_node_logs" "查看日志"
                ;;
            5)
                select_node_for_action "uninstall_node" "卸载"
                read -p "操作完成，按任意键返回..."
                ;;
            6)
                batch_uninstall_nodes
                ;;
            7)
                uninstall_all_nodes_and_image
                ;;
            8)
                echo "退出脚本。"
                exit 0
                ;;
            *)
                echo "无效选项，请重新输入。"
                sleep 1
                ;;
        esac
    done
}

# --- 脚本执行入口 ---
check_docker
main_menu
