#!/bin/bash
set -e

# ================================================================================================
# Nexus 多节点管理脚本 - v5.9.7 跨平台模拟终极版
#
# 改版者: AI & 社区智慧
#
# 【V5.9.7 - 跨平台模拟终极版】:
#   - 【根本性修复】: 经查证，Nexus官方仅提供 'arm64' 架构的Linux二进制文件。
#     本脚本现已完全回归 arm64 路线，并在 amd64 主机上通过 Docker (QEMU)
#     模拟 arm64 环境来运行节点。这解决了因官方缺少 amd64 文件导致的 '404 Not Found' 错误。
#   - 【环境配置】: 脚本将确保 Docker 的 binfmt_misc/QEMU 支持已正确安装，
#     这是在 amd64 主机上运行 arm64 容器的先决条件。
#   - 【代码稳定】: 恢复 v5.9.5 的全自动注册等所有优化逻辑。
#
# ================================================================================================

# --- 配置项 ---
SCRIPT_VERSION="v5.9.7 跨平台模拟 (arm64 on amd64)"
NEXUS_CLI_VERSION="v0.10.8"
BASE_CONTAINER_NAME="nexus-node"
IMAGE_NAME="nexus-node:stable-arm64-emu" # 'emu' for emulated
BUILDER_NAME="nexus_builder"
HOST_CONFIG_DIR="/root/nexus_config"
WALLET_ADDRESS="0x62250580AeC82545bD5c3133c4e293780391813c"

# --- 其他配置 ---
NODE_CPU_LIMIT="0"; NODE_MEM_LIMIT="0";
COLOR_RESET='\033[0m'; COLOR_RED='\033[0;31m'; COLOR_GREEN='\033[0;32m'; COLOR_YELLOW='\033[0;33m';
COLOR_BLUE='\033[0;34m'; COLOR_CYAN='\033[0;36m'; COLOR_BOLD='\033[1m'
TMP_WORKDIR="";
cleanup() { EXITCODE=$?; printf "\n"; print_info "清理..."; docker buildx use default &>/dev/null || true; docker buildx rm "$BUILDER_NAME" &>/dev/null || true; [ -n "$TMP_WORKDIR" ] && [ -d "$TMP_WORKDIR" ] && rm -rf "$TMP_WORKDIR"; exit $EXITCODE; }; trap cleanup EXIT HUP INT QUIT TERM
print_color() { echo -e "${2}${1}${COLOR_RESET}"; }; print_success() { print_color "$1" "$COLOR_GREEN"; }; print_error() { print_color "$1" "$COLOR_RED"; }; print_warning() { print_color "$1" "$COLOR_YELLOW"; }; print_info() { print_color "$1" "$COLOR_CYAN"; }; print_bold() { print_color "$1" "${COLOR_BOLD}${COLOR_CYAN}"; }; safe_sleep() { read -t "$1" < /dev/null 2>/dev/null || true; };
prepare_system() { print_bold "第一阶段: 系统环境准备"; if ! ping -c 1 -W 3 8.8.8.8 &>/dev/null; then print_error "!! 致命网络错误。"; exit 1; fi; print_success "网络正常。"; };
ensure_docker_ready() { print_bold "第二阶段: Docker环境部署"; if docker info >/dev/null 2>&1; then print_success "Docker已在运行。"; return 0; fi; print_error "!! Docker 未运行。"; exit 1; };

setup_cross_platform_env() {
    print_bold "第三阶段: 配置跨平台模拟环境"
    print_info "正在安装/刷新 QEMU 模拟器支持 (binfmt)..."
    docker run --rm --privileged tonistiigi/binfmt --install all &>/dev/null
    print_success "跨平台模拟环境已就绪。"
    
    print_info "设置 Buildx builder '$BUILDER_NAME'..."
    docker buildx create --name "$BUILDER_NAME" --driver docker-container --bootstrap >/dev/null 2>&1 || true
    docker buildx use "$BUILDER_NAME"
    print_success "Buildx builder 已就绪。"
}

build_image() {
    if [[ "$1" != "--force" ]] && docker image inspect "$IMAGE_NAME" &>/dev/null; then print_info "镜像 '$IMAGE_NAME' 已存在，跳过。"; return 0; fi
    print_bold "第四阶段: 构建 arm64 节点镜像"
    setup_cross_platform_env
    TMP_WORKDIR=$(mktemp -d); cd "$TMP_WORKDIR"
    
    # 【核心修复】使用官方唯一提供的 arm64 版本下载链接
    cli_url="https://github.com/nexus-xyz/nexus-cli/releases/download/${NEXUS_CLI_VERSION}/nexus-network-linux-arm64"
    print_info "正在生成 Dockerfile (v5.9.7 - arm64)...";
    
    cat > Dockerfile <<EOF
# 【核心修复】强制指定平台为 linux/arm64，将在 amd64 主机上通过QEMU模拟运行
FROM --platform=linux/arm64 ubuntu:22.04
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates curl procps libc6 libssl3 wget net-tools iproute2 && \
    rm -rf /var/lib/apt/lists/*
ADD ${cli_url} /usr/local/bin/nexus-network
RUN chmod +x /usr/local/bin/nexus-network && \
    ln -s /usr/local/bin/nexus-network /usr/local/bin/nexus-cli
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
VOLUME /root/.nexus
ENTRYPOINT ["/entrypoint.sh"]
HEALTHCHECK --interval=1m --timeout=10s --retries=3 CMD pgrep -x nexus-network >/dev/null || exit 1
EOF
    cat > entrypoint.sh <<'EOF'
#!/bin/bash
set -e
if [ -z "$NODE_ID" ]; then echo "错误: NODE_ID未设置!" >&2; exit 1; fi
echo "$NODE_ID" > /root/.nexus/node-id
echo ">>> 即将启动 Nexus 节点 $NODE_ID... (在模拟环境中) <<<"
exec nexus-network start
EOF

    print_info "正在为 arm64 平台构建镜像 '$IMAGE_NAME' (这可能需要一些时间)...";
    if ! docker buildx build --platform linux/arm64 --builder "$BUILDER_NAME" -t "$IMAGE_NAME" . --load; then
      print_error "!! 镜像构建失败。"; exit 1;
    fi
    print_success "镜像 '$IMAGE_NAME' 构建成功。"
}

check_and_initialize_config() {
    print_bold "零阶段: 检查核心配置文件"
    if [ -f "${HOST_CONFIG_DIR}/config.json" ]; then print_success "核心配置文件已存在。"; return 0; fi
    print_warning "未找到核心配置，即将开始自动注册..."
    if [ -z "$WALLET_ADDRESS" ] || [[ "$WALLET_ADDRESS" =~ YOUR_WALLET_ADDRESS ]]; then print_error "!! 致命错误: 脚本中 WALLET_ADDRESS 未配置！"; exit 1; fi
    print_info "步骤1: 确保基础镜像存在..."; build_image;
    print_info "步骤2: 使用内置钱包地址进行一次性注册..."; mkdir -p "$HOST_CONFIG_DIR"
    if ! docker run --rm --platform linux/arm64 -v "${HOST_CONFIG_DIR}:/root/.nexus" "${IMAGE_NAME}" \
      nexus-cli register-user --wallet-address "${WALLET_ADDRESS}"; then
        print_error "!! 自动注册失败！"; rm -rf "${HOST_CONFIG_DIR}"; exit 1
    fi
    print_success "自动注册成功！核心配置文件已生成于 ${HOST_CONFIG_DIR}"
    safe_sleep 2
}

run_container() {
    local node_id="$1"; [ -z "$node_id" ] && { print_error "ID不能为空"; return 1; };
    local cname="${BASE_CONTAINER_NAME}-${node_id}";
    if [ -n "$(docker ps -a -q -f name="^${cname}$")" ]; then docker stop "$cname" &>/dev/null || true; docker rm "$cname" &>/dev/null || true; fi
    local run_opts=""
    if [[ "$NODE_MEM_LIMIT" != "0" && -n "$NODE_MEM_LIMIT" ]]; then run_opts+=" --memory=${NODE_MEM_LIMIT}"; fi
    if [[ "$NODE_CPU_LIMIT" != "0" && -n "$NODE_CPU_LIMIT" ]]; then run_opts+=" --cpus=${NODE_CPU_LIMIT}"; fi
    print_info "正在启动节点 ${node_id}..."; mkdir -p "$HOST_CONFIG_DIR"
    if ! docker run -d --name "$cname" --platform linux/arm64 -e NODE_ID="$node_id" -v "${HOST_CONFIG_DIR}:/root/.nexus" $run_opts --restart unless-stopped "$IMAGE_NAME" &>/dev/null; then
        print_error "!! 容器 '${cname}' 启动失败。"; return 1
    fi
    print_info "等待容器稳定 (10秒)..." && safe_sleep 10
    if [ -n "$(docker ps -q -f name="^${cname}$")" ]; then print_success "节点 $node_id 启动成功。"; else
        print_error "!! 节点 $node_id 未能保持运行！"; print_warning "查看日志:"; docker logs "$cname";
    fi
}
# --- 菜单和列表函数 (保持简洁) ---
list_nodes() { print_color "=============================== 当前 Nexus 节点状态 ===============================" "$COLOR_BLUE"; printf "%-38s %s\n" "$(print_bold "节点ID(容器名)")" "$(print_bold "状态")"; print_color "---------------------------------------------------------------------------------" "$COLOR_BLUE"; local nodes=$(docker ps -a --filter "name=${BASE_CONTAINER_NAME}-" --format "{{.Names}}" | sed "s/^${BASE_CONTAINER_NAME}-//" | sort -u); if [ -z "$nodes" ]; then print_warning "未找到任何 Nexus 节点。"; else for id in $nodes; do local cname="${BASE_CONTAINER_NAME}-${id}"; local raw_status=$(docker ps -a -f name="^${cname}$" --format "{{.Status}}"); local s_color="$COLOR_RED"; local status_text=""; if [[ "$raw_status" == *"Up"* ]]; then if [[ "$raw_status" == *"(healthy)"* ]]; then s_color="$COLOR_GREEN"; status_text="运行中 (健康)"; elif [[ "$raw_status" == *"(unhealthy)"* ]]; then s_color="$COLOR_RED"; status_text="运行中 (不健康!)"; elif [[ "$raw_status" == *"(health: starting)"* ]]; then s_color="$COLOR_YELLOW"; status_text="启动中 (检查..)"; else s_color="$COLOR_GREEN"; status_text="运行中"; fi; elif [[ "$raw_status" == *"Exited"* ]]; then s_color="$COLOR_YELLOW"; status_text="已退出"; else status_text="$raw_status"; fi; printf "%-38s %s\n" "$id ($cname)" "$(print_color "$status_text" "$s_color")"; done; fi; print_color "=================================================================================" "$COLOR_BLUE"; }
menu_install_single() { read -rp "请输入要安装的 Node ID: " id; id=$(echo "$id"|xargs); if [ -n "$id" ]; then run_container "$id"; else print_warning "ID 无效。"; fi; read -n 1 -s -r -p "按任意键返回..."; }
menu_update() { while true; do clear; print_color "===== 系统维护与更新 =====" "$COLOR_BLUE"; echo " 1. 强制重构镜像"; echo " 2. 【危险】彻底清理所有数据"; echo " 0. 返回"; read -rp "请输入选项: " choice; case $choice in 1) build_image "--force";; 2) if confirm_action "【警告】将删除所有容器,所有镜像,buildx,及共享配置! 确定吗?"; then docker rm -f $(docker ps -a -q --filter "name=nexus-node-") >/dev/null 2>&1 || true; docker rmi -f $(docker images -q "nexus-node*") >/dev/null 2>&1 || true; docker buildx rm -f "$BUILDER_NAME" >/dev/null 2>&1 || true; rm -rf "$HOST_CONFIG_DIR"; print_success "彻底清理完成。"; fi;; 0) break;; *) print_error "无效选项。";; esac; read -n 1 -s -r -p "按任意键返回..."; done; }
view_node_logs() { local nodes=($(docker ps -a --filter "name=${BASE_CONTAINER_NAME}-" --format "{{.Names}}" | sed "s/^${BASE_CONTAINER_NAME}-//" | sort -u)); if [ ${#nodes[@]} -eq 0 ]; then print_warning "无节点可操作。"; else print_info "按 Ctrl+C 退出日志。"; docker logs -f "${BASE_CONTAINER_NAME}-${nodes[0]}"; fi; read -n 1 -s -r -p "按任意键返回..."; }

main_menu() {
    if [ "$(id -u)" -ne 0 ]; then print_error "错误: 脚本需root权限。"; exit 1; fi
    prepare_system
    ensure_docker_ready
    check_and_initialize_config
    while true; do
        clear; print_color "===== Nexus 管理脚本 ${SCRIPT_VERSION} =====" "$COLOR_BLUE"; list_nodes; echo;
        print_info "--- 节点管理 ---"; echo " 1. 安装/启动单节点     2. 查看节点日志"; echo " 3. 【危险】彻底清理所有数据"; echo "  0. 退出脚本";
        echo; read -rp "请输入选项: " choice
        case $choice in 1) menu_install_single ;; 2) view_node_logs ;; 3) menu_update ;; 0) break ;; *) print_error "无效选项。" && safe_sleep 1 ;; esac
    done
}

main_menu
