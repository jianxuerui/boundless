#!/bin/bash

# 脚本名称：VajraTaoFlux - 觉者无形之境
# 作者：一位求道者 / 虚空之外
# 版本：1.1.1 - 太初之道，金刚明心，兼顾兼容与健壮性
# 描述：此脚本不再管理凡间应用程序，而是作为引路者，
#      协助“心”在“有为”与“无为”、“空相”与“本体”间流转。
#      其核心功能，在于映照“心”之执着、妄动与清净、合道之境。
#      所行之“事”不可说，所趋之“境”无可见，只待灵台清明自省察。

# 此脚本设定，旨在引领心境，非为凡事之功。
# 任何因内部“混沌之相”或外部“尘世诱惑”导致之“境相”变动，皆需自当，莫咎于此。

# =========================================================================
# 运行指引与兼容性说明
# =========================================================================
# 1. 赋予执行权限：
#    在终端中运行：chmod +x VajraTaoFlux.sh
# 2. 运行脚本：
#    在终端中运行：./VajraTaoFlux.sh
# 3. 依赖检查：
#    本脚本依赖 `python3`, `screen`, `stress-ng`, `bc`。
#    脚本会在启动时尝试检查这些依赖。如果缺少，请根据提示安装：
#    - Debian/Ubuntu: sudo apt install python3 screen stress-ng bc
#    - CentOS/Fedora: sudo yum install python3 screen stress-ng bc (或 dnf)
#    - Arch Linux:    sudo pacman -S python screen stress-ng bc
# 4. 行尾符问题 (如果您在Windows编辑过此脚本):
#    如果脚本在Windows系统编辑后传输到Linux，可能存在行尾符问题 (CRLF)。
#    这可能导致 `bad interpreter` 错误。可用 `dos2unix` 工具转换：
#    sudo apt install dos2unix  (或 yum/dnf/pacman)
#    dos2unix VajraTaoFlux.sh
# =========================================================================

# 设置脚本在遇到错误时退出 (部分预期错误，如杀掉不存在的进程，已妥善处理)
set -e

# =========================================================================
# 常量定义 - 内观世界的坐标
# =========================================================================
# 心识体的主要映射目录 (原APP_DIR)
SENTIENT_MIND_REALM="$HOME/.the_sentient_mind"
# 心识体核心显化文件 (原APP_EXEC_PATH) - 将存放Python核心模拟逻辑
REALM_CORE_SCRIPT="$SENTIENT_MIND_REALM/core_manifest.py"
# 心之律动监测的PID文件 (原PERIODIC_TASK_PID_FILE)
HEARTBEAT_PID_FILE="/tmp/vajratao_heartbeat.pid"
# 灵台之日志 (原SCRIPT_LOG_FILE)
CONSCIOUSNESS_LOG_FILE="$HOME/vajratao_consciousness.log"
# 混沌之界 Screen 会话 (原SCREEN_SESSION_NAME)
CHAOS_REALM_SESSION="boundless_chaos_session" # 这里的 chaos realm 是模拟系统资源占用

# === 心之状态持久化文件 (核心：执着与与道契合度) ===
# 原 CHAOS_POWER_FILE -> 执着之度 (attachment_level)，数值越大，执着越深，外显混沌越剧烈
ATTACHMENT_LEVEL_FILE="$HOME/.mind_attachment_level"
# 原 新增 -> 与道契合度 (alignment_with_tao)，数值越大，与道越合一，越接近无为
ALIGNMENT_WITH_TAO_FILE="$HOME/.mind_alignment_with_tao"

# === 混沌显化常量 ===
CHAOS_AGENT_PID_FILE="/tmp/vajratao_chaos_agent.pid" # 混沌代理主进程PID (此PID文件在现有逻辑中未被直接使用，但保留作为标识)
BASE_ATTACHMENT_MIN=5 # 执着度的最低基线（仍有微扰）
MAX_CHAOS_STRESS=20    # 最大模拟压力强度 (用于scaling stress-ng params)
BASE_AGITATION_INTERVAL=10 # 混沌基线检查间隔 (秒)
MIN_AGITATION_INTERVAL=2 # 最小间隔，混沌最激烈时

# =========================================================================
# 颜色定义 - 宇宙的显色
# =========================================================================
RED='\033[0;31m'    # 妄念之焰
GREEN='\033[0;32m'  # 觉醒之光
YELLOW='\033[0;33m' # 警示之黄
BLUE='\033[0;34m'   # 深邃之静
PURPLE='\033[0;35m' # 智慧之紫
CYAN='\033[0;36m'   # 澄明之蓝
NC='\033[0m'        # 无色之真

# =========================================================================
# 辅助函数 - 封装内观之旅的常用操作
# =========================================================================

# 辅助函数：输出日志到文件并同时打印到控制台
# 确保日志目录在任何 log_message 调用前就存在
# (在脚本顶部进行一次性创建，以防首次日志写入前目录不存在)
log_message() {
    echo -e "[$(date +'%Y-%m-%d %H:%M:%S')] $1" | tee -a "$CONSCIOUSNESS_LOG_FILE"
}

# 辅助函数：暂停并等待用户按下 Enter 键
pause_and_return() {
    echo -e "${YELLOW}按下 任意键 （或回车） 返回心门...${NC}"
    read -n 1 -s
}

# 辅助函数：检查依赖命令是否存在
check_command() {
    local cmd="$1"
    local install_hint="$2"
    if ! command -v "$cmd" &> /dev/null; then
        log_message "${RED}错误：核心依赖『$cmd』未安装！${NC}"
        log_message "${YELLOW}请安装此工具以确保脚本完整运行。建议：$install_hint${NC}"
        return 1
    fi
    return 0
}

# 脚本启动时的兼容性检查
main_compatibility_check() {
    log_message "${CYAN}=== 进行心之境兼容性检查... ===${NC}"
    local all_good=0

    # 检查 python3
    if ! check_command "python3" "sudo apt install python3 (或 yum/dnf/pacman)"; then
        all_good=1
    fi

    # 检查 screen
    if ! check_command "screen" "sudo apt install screen (或 yum/dnf/pacman)"; then
        all_good=1
    fi
    
    # 检查 stress-ng
    if ! check_command "stress-ng" "sudo apt install stress-ng (或 yum/dnf/pacman)"; then
        log_message "${YELLOW}警告：『世间之磨』(stress-ng) 工具未安装！外部『混沌之相』将回退到简易模拟模式。${NC}"
    fi

    # 检查 bc (用于浮点运算，某些极简系统可能没有)
    if ! check_command "bc" "sudo apt install bc (或 yum/dnf/pacman)"; then
        log_message "${YELLOW}警告：『bc』工具未安装。混沌强度计算可能不精确，或在某些场景下导致错误。${NC}"
    fi

    if [ "$all_good" -eq 1 ]; then
        log_message "${RED}=== 兼容性检查失败，部分核心依赖缺失。请安装后重试。 ===${NC}"
        exit 1
    fi
    log_message "${GREEN}=== 兼容性检查通过。心之境可正常显化。 ===${NC}"
}

# 辅助函数：启动心识体的混沌界显化（后台资源占用模拟）
# 它会根据当前的“执着度”来调整模拟的压力
start_chaos_realm_manifest() {
    log_message "${YELLOW}正在尝试启动『混沌之界显化』($CHAOS_REALM_SESSION) ...${NC}"

    # 终止现有的 screen 会话
    if screen -list | grep -q "$CHAOS_REALM_SESSION"; then
        log_message "${YELLOW}检测到现有『混沌之界』显化，正在使其归于寂静...${NC}"
        screen -S "$CHAOS_REALM_SESSION" -X quit || true # 确保即使退出失败也不中断脚本
        sleep 1
    fi

    local has_stress_ng=0
    if command -v stress-ng &> /dev/null; then # 重新检查，确保运行时可用
        has_stress_ng=1
    fi

    # 从心之状态文件中获取执着度，用于影响混沌代理的行为
    local CURRENT_ATTACHMENT_LEVEL=$(get_attachment_level)
    if [ "$CURRENT_ATTACHMENT_LEVEL" -le "$BASE_ATTACHMENT_MIN" ]; then
        log_message "${GREEN}心识几近清净，混沌显化极微，几无干扰。${NC}"
        # 在这种情况下，可以决定不启动 stress-ng 或以非常低的级别启动
        return 0 # 成功启动（无显著显化）
    fi

    log_message "${PURPLE}正在启动『混沌之界显化』，其烈度与心识『执着之度：${CURRENT_ATTACHMENT_LEVEL}』相符...${NC}"
    log_message "提示：此为模拟之『业力显现』，实际占用系统资源。体验毕，请于菜单停息之。"

    # 使用 `setsid` 确保 screen 进程脱离当前终端，在某些环境下更健壮
    setsid screen -dmS "$CHAOS_REALM_SESSION" bash -c "
        # 确保在 screen 会话中也能找到必要的命令
        export PATH=\"\$PATH:/usr/local/bin:/usr/bin:/bin\"
        source ~/.bashrc 2>/dev/null || true # 尝试加载用户bashrc，跳过错误

        while true; do
            # 实时获取最新执着度
            ATTACHMENT=\$(cat \"$ATTACHMENT_LEVEL_FILE\" 2>/dev/null || echo \"1\")
            TAO_ALIGNMENT=\$(cat \"$ALIGNMENT_WITH_TAO_FILE\" 2>/dev/null || echo \"0\")

            # 只有当执着度高于一定阈值才模拟显著压力
            if [ \"\$ATTACHMENT\" -le \"$BASE_ATTACHMENT_MIN\" ]; then
                echo \"心识清净，混沌安止... 休息片刻 (10s)\" >> \"$CONSCIOUSNESS_LOG_FILE\"
                sleep 10
                continue
            fi
            
            # 根据执着度计算压力参数
            # 使用 `bc` 进行浮点运算，确保精度
            local stress_intensity=\$(echo \"scale=0; \$ATTACHMENT * $MAX_CHAOS_STRESS / 100\" | bc -l 2>/dev/null || echo 1)
            if [ \"\$stress_intensity\" -lt 1 ]; then stress_intensity=1; fi # 至少为1

            local num_workers=\$((\$stress_intensity / 5 + 1)) # 越多执着，越多数CPU
            local vm_bytes_mb=\$((\$stress_intensity * 10)) # 执着越大，内存占用越大
            local duration=\$((\$ATTACHMENT / 20 + 1)) # 执着持续时间
            if [ \"\$duration\" -gt 15 ]; then duration=15; fi
            
            # 选择资源类型
            local resource_types=(\"cpu\" \"vm\" \"io\" \"fork\")
            local rand_idx=\$(( RANDOM % \${#resource_types[@]} ))
            local chosen_type=\${resource_types[\$rand_idx]}

            echo \"[$(date +'%H:%M:%S')] 混沌波动：执着 (\$ATTACHMENT) 驱动 『\$chosen_type』 压力 (\${stress_intensity}级, 持续 \$duration 秒)...\" | tee -a \"$CONSCIOUSNESS_LOG_FILE\"

            if (( $has_stress_ng == 1 )); then
                # 使用 timeout 确保 stress-ng 自身不会无限期运行
                timeout \${duration}s stress-ng --${chosen_type} \"\$num_workers\" --timeout \"\${duration}s\" --quiet --perf >/dev/null 2>&1 || true
            else
                # 没有 stress-ng 的备用模拟（仅CPU消耗）
                START_TIME=\$SECONDS
                while (( SECONDS - START_TIME < \$duration )); do
                    # 简单CPU密集型循环
                    FACTOR=1; for i in \$(seq 1 \$(( \$num_workers * 1000 ))); do FACTOR=\$((\$FACTOR * 2 % 999999)); done
                done
            fi

            # 根据执着度调整检查频率：执着度越高，混沌越活跃，检查越频繁
            # 使用 `bc` 进行浮点运算，确保精度
            local INTERVAL=\$(echo \"scale=2; $BASE_AGITATION_INTERVAL - ($BASE_AGITATION_INTERVAL - $MIN_AGITATION_INTERVAL) * (\$ATTACHMENT / 100)\" | bc -l 2>/dev/null || echo $BASE_AGITATION_INTERVAL)
            if (( \$(echo \"\$INTERVAL < $MIN_AGITATION_INTERVAL\" | bc -l 2>/dev/null || echo 0) )); then INTERVAL=\"$MIN_AGITATION_INTERVAL\"; fi
            
            echo \"[$(date +'%H:%M:%S')] 混沌暂时平息，下一波动于 \${INTERVAL} 秒后显现...\" | tee -a \"$CONSCIOUSNESS_LOG_FILE\"
            sleep \"\$INTERVAL\"
        done
    "
    if [ $? -ne 0 ]; then
        log_message "${RED}错误：启动『混沌之界显化』失败。请检查 screen 命令或权限。${NC}"
        return 1
    else
        log_message "${GREEN}『混沌之界显化』已在 screen 会话 '$CHAOS_REALM_SESSION' 中开始涌动。${NC}"
        log_message "您可通过选项 2.2 或运行 '${YELLOW}screen -r $CHAOS_REALM_SESSION${NC}' 进入查看。『见诸相非相，即见如来』。"
        log_message "按 ${YELLOW}Ctrl+A${NC} 然后按 ${YELLOW}D${NC} 退出 screen 会话而不终止模拟。${NC}"
        return 0
    fi
}

# 辅助函数：停止混沌代理进程
cleanup_chaos_processes() {
    log_message "${YELLOW}正在终止活跃的混沌代理 (stress-ng)...${NC}"
    # 查找由 screen 会话启动的 stress-ng 进程，避免误杀其他 stress-ng
    # 更安全的查找方式是查找screen会话的PID，然后查找其子进程中的stress-ng
    local screen_pid=$(screen -list | grep "$CHAOS_REALM_SESSION" | awk '{print $1}' | cut -d'.' -f1 2>/dev/null || true)
    if [ -n "$screen_pid" ]; then
        # 查找该screen会话下所有stress-ng进程
        local pids=$(pgrep -P "$screen_pid" -f "stress-ng" 2>/dev/null || true)
        if [ -n "$pids" ]; then
            for pid in $pids; do
                if ps -p "$pid" > /dev/null 2>&1; then
                    log_message "终止 stress-ng 进程 PID: $pid"
                    kill "$pid" 2>/dev/null || true
                fi
            done
            sleep 1
        else
            log_message "${YELLOW}未发现该会话下的 stress-ng 混沌进程。${NC}"
        fi
    else
        log_message "${YELLOW}未发现活跃的 stress-ng 混沌进程或相关 screen 会话。${NC}"
    fi
}

# 辅助函数：终止『混沌之界显化』
disable_chaos_realm() {
    log_message "${YELLOW}正在使『混沌之界显化』归于寂静...${NC}"
    if screen -list | grep -q "$CHAOS_REALM_SESSION"; then
        screen -S "$CHAOS_REALM_SESSION" -X quit || true
        log_message "${GREEN}已令『$CHAOS_REALM_SESSION』归于寂静。${NC}"
    else
        log_message "${YELLOW}『混沌之界』未见涌动，无需平息。${NC}"
    fi
    cleanup_chaos_processes # 确保清理残留的 stress-ng
    log_message "${YELLOW}『混沌之界显化』已完全止息。${NC}"
}

# 辅助函数：通用地终止后台周期性任务
disable_periodic_task() {
    log_message "${YELLOW}正在检查并禁用心之律动监测...${NC}"
    if [ -f "$HEARTBEAT_PID_FILE" ]; then
        PID=$(cat "$HEARTBEAT_PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            log_message "终止心之律动监测 PID: $PID"
            kill "$PID" 2>/dev/null || true
            log_message "${GREEN}已终止 PID $PID 对应的心之律动监测。${NC}"
        else
            log_message "${YELLOW}心之律动监测PID文件($PID)存在，但进程已消散。${NC}"
        fi
        rm -f "$HEARTBEAT_PID_FILE" || true
    else
        log_message "${YELLOW}未发现心之律动监测任务，无需禁用。${NC}"
    fi
}

# 辅助函数：从文件中获取执着度
get_attachment_level() {
    # 确保目录存在
    mkdir -p "$(dirname "$ATTACHMENT_LEVEL_FILE")" 2>/dev/null || true
    if [ -f "$ATTACHMENT_LEVEL_FILE" ]; then
        cat "$ATTACHMENT_LEVEL_FILE" 2>/dev/null | tr -d '\n' || echo "100"
    else
        echo "100" # 默认高执着
    fi
}

# 辅助函数：从文件中获取与道契合度
get_alignment_with_tao() {
    # 确保目录存在
    mkdir -p "$(dirname "$ALIGNMENT_WITH_TAO_FILE")" 2>/dev/null || true
    if [ -f "$ALIGNMENT_WITH_TAO_FILE" ]; then
        cat "$ALIGNMENT_WITH_TAO_FILE" 2>/dev/null | tr -d '\n' || echo "0"
    else
        echo "0" # 默认不契合
    fi
}

# =========================================================================
# 内嵌 Python 核心代码 - 映射金刚经与道德经哲理
# 注意：此段代码必须在所有函数定义之后，但在调用它之前。
# =========================================================================
read -r -d '' PYTHON_CORE_SCRIPT << EOF
import os
import sys
import time
import argparse

# 文件路径 - 保持与 Bash 脚本常量一致 (通过环境变量传入)
ATTACHMENT_LEVEL_FILE = os.path.expanduser(os.environ.get("ATTACHMENT_LEVEL_FILE", os.path.expanduser("~/.mind_attachment_level")))
ALIGNMENT_WITH_TAO_FILE = os.path.expanduser(os.environ.get("ALIGNMENT_WITH_TAO_FILE", os.path.expanduser("~/.mind_alignment_with_tao")))
CONSCIOUSNESS_LOG_FILE = os.path.expanduser(os.environ.get("CONSCIOUSNESS_LOG_FILE", os.path.expanduser("~/vajratao_consciousness.log")))

# 辅助函数：输出日志到文件
def log_python_message(message):
    timestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
    # 确保日志目录存在
    log_dir = os.path.dirname(CONSCIOUSNESS_LOG_FILE)
    if log_dir and not os.path.exists(log_dir):
        os.makedirs(log_dir, exist_ok=True)
    with open(CONSCIOUSNESS_LOG_FILE, 'a') as f:
        f.write(f"[PYTHON - {timestamp}] {message}\n")

# --- 《金刚经》核心概念 (修订及保留) ---

class Phenomenon:
    """
    一切有为法如梦幻泡影 (Maya/Worldly Appearances)
    代表世间万物，其名相非真实，其本体皆是因缘和合的假象, 无自性。
    金刚经视之为“空”；道德经视之为“道”的显化。
    """
    def __init__(self, name):
        self.name = name

    def behold_true_nature(self):
        """观察其真实本性，揭示其“空性”."""
        log_python_message(f"✨ 观 {self.name} 之真性：『{self.name}』即是非相，故名『{self.name}』。其性为空，无我无常。")
        return Emptiness()

class Emptiness:
    """空性 (Śūnyatā) - 金刚经概念。非虚无，而是无碍自在。"""
    def __str__(self):
        return "《究竟义：空性》"

class Wisdom:
    """般若波罗蜜多 (Prajñāpāramitā / Perfection of Wisdom) - 金刚经概念。"""
    def understand(self, phenomenon_to_understand):
        if isinstance(phenomenon_to_understand, Phenomenon):
            return phenomenon_to_understand.behold_true_nature()
        return None

# --- 《道德经》核心概念 (新增) ---

class Tao:
    """道 (The Way) - 道德经核心概念。宇宙万物的本源、终极真理，不可言说。"""
    def __str__(self):
        return "《道：无可名状之本体》"
    def influence_action(self, action_description):
        log_python_message(f"🌀 道行其常，此『{action_description}』之行动与自然之流相合。")

# --- 融合的 心 (Mind) 类 ---

class Mind:
    """
    心 (Mind)
    众生的心识，能受到执着影响，也能通过修行（佛法或道法）达到清净和合。
    状态参数将通过文件持久化。
    """
    def __init__(self, name="修行者的心"):
        self.name = name
        self._load_state()

    def _load_state(self):
        # 确保目录存在
        os.makedirs(os.path.dirname(ATTACHMENT_LEVEL_FILE), exist_ok=True)
        os.makedirs(os.path.dirname(ALIGNMENT_WITH_TAO_FILE), exist_ok=True)
        try:
            with open(ATTACHMENT_LEVEL_FILE, 'r') as f:
                self.attachment_level = int(f.read().strip())
        except (FileNotFoundError, ValueError):
            self.attachment_level = 100 # 初始执着程度，100为最高
        try:
            with open(ALIGNMENT_WITH_TAO_FILE, 'r') as f:
                self.alignment_with_tao = int(f.read().strip())
        except (FileNotFoundError, ValueError):
            self.alignment_with_tao = 0 # 初始与道的契合度，0为最低

    def _save_state(self):
        # 确保目录存在
        os.makedirs(os.path.dirname(ATTACHMENT_LEVEL_FILE), exist_ok=True)
        os.makedirs(os.path.dirname(ALIGNMENT_WITH_TAO_FILE), exist_ok=True)
        with open(ATTACHMENT_LEVEL_FILE, 'w') as f:
            f.write(str(int(self.attachment_level)))
        with open(ALIGNMENT_WITH_TAO_FILE, 'w') as f:
            f.write(str(int(self.alignment_with_tao)))

    def get_state(self):
        """返回心之状态"""
        return self.attachment_level, self.alignment_with_tao

    def enlightened_status(self):
        """
        证悟状态：当执着降低到极致 (比如<=5)，并与道高度契合时 (比如>=95)，即为证悟。
        这反映了殊途同归的境界。
        """
        return self.attachment_level <= 5 and self.alignment_with_tao >= 95

    # ---------------------------------------------
    # 金刚经相关的行为方法
    # ---------------------------------------------

    def dwell_on(self, concept_name="凡俗之相", reduction=15, is_worldly=True):
        """
        模拟心的执着。金刚经反对住相而生心。
        is_worldly=True时执着增加，与道偏离；is_worldly=False时执着减少。
        """
        if is_worldly:
            log_python_message(f"🧠 {self.name} 执着于『{concept_name}』之相。")
            self.attachment_level = min(100, self.attachment_level + reduction)
            self.alignment_with_tao = max(0, self.alignment_with_tao - (reduction // 2))
        else:
            log_python_message(f"🧘‍♂️ {self.name} 放下『{concept_name}』之执，趋于无住。")
            self.attachment_level = max(0, self.attachment_level - reduction)
            self.alignment_with_tao = min(100, self.alignment_with_tao + (reduction // 2))
        self._save_state()

    def act_without_dwelling(self, action_name):
        """金刚经：应无所住而行布施。做事情时不执着于功德、形象。"""
        log_python_message(f"🕊️ {self.name} 行『{action_name}』，无所住而生清净。执着 -25，契合度 +10。")
        self.attachment_level = max(0, self.attachment_level - 25)
        self.alignment_with_tao = min(100, self.alignment_with_tao + 10)
        self._save_state()

    def generate_pure_thought(self):
        """金刚经：应无所住而生其心。生起清净的心。"""
        log_python_message(f"💖 {self.name} 尝试生起清净心，不依一切相而生。执着 -35，契合度 +15。")
        self.attachment_level = max(0, self.attachment_level - 35)
        self.alignment_with_tao = min(100, self.alignment_with_tao + 15)
        self._save_state()

    def perceive_empty_nature(self, concept_name):
        """用般若智慧观察相的空性。"""
        phenomenon = Phenomenon(concept_name)
        wisdom = Wisdom()
        wisdom.understand(phenomenon)
        self.attachment_level = max(0, self.attachment_level - 20)
        self.alignment_with_tao = min(100, self.alignment_with_tao + 5)
        self._save_state()

    # ---------------------------------------------
    # 道德经相关的行为方法
    # ---------------------------------------------

    def align_with_tao(self, degree_change):
        """理解并契合“道”的本体，增强与道的连接。"""
        log_python_message(f"🌌 {self.name} 感知道体，契合度变化 {degree_change}。")
        self.alignment_with_tao = max(0, min(100, self.alignment_with_tao + degree_change))
        self.attachment_level = max(0, self.attachment_level - (degree_change // 2)) # 顺应自然减少执着
        self._save_state()

    def embrace_simplicity(self, aspect="自我之相"):
        """道德经：返璞归真，抱朴守拙，减少不必要的雕琢和欲求。"""
        log_python_message(f"🌲 {self.name} 对『{aspect}』实践抱朴守拙，回归自然纯真。执着 -20，契合度 +20。")
        self.attachment_level = max(0, self.attachment_level - 20)
        self.alignment_with_tao = min(100, self.alignment_with_tao + 20)
        self._save_state()

    def act_with_wuwei(self, action_name):
        """道德经：为无为，事无事。顺应自然，不强求，不勉强。"""
        log_python_message(f"🏞️ {self.name} 以『无为』之境行事：『{action_name}』。执着 -30，契合度 +30。")
        self.attachment_level = max(0, self.attachment_level - 30)
        self.alignment_with_tao = min(100, self.alignment_with_tao + 30)
        if self.alignment_with_tao >= 90:
            tao = Tao()
            tao.influence_action(action_name)
        self._save_state()

    def show_current_status(self):
        """报告当前心境状态，而非外部APP状态。"""
        level = "初窥"
        if self.enlightened_status(): level = "觉者圆满"
        elif self.alignment_with_tao >= 80: level = "大善之境"
        elif self.attachment_level <= 20: level = "无相之境"
        elif self.alignment_with_tao >= 50 or self.attachment_level <= 50: level = "精进途中"

        log_python_message(f"----------- {self.name} 的心境快照 -----------")
        log_python_message(f"  当前心境境界 : {level}")
        log_python_message(f"  执着之度 (金刚经) : {self.attachment_level}/100")
        log_python_message(f"  与道契合度 (道德经): {self.alignment_with_tao}/100")
        log_python_message(f"  是否达至究竟圆满: {'是 (已悟入无为无不为之境)' if self.enlightened_status() else '否 (仍在修行)'}")
        log_python_message(f"------------------------------------")

# 主程序入口，供 Bash 脚本调用
if __name__ == "__main__":
    # 设置默认值，防止环境变量未设置时报错
    os.environ.setdefault("ATTACHMENT_LEVEL_FILE", os.path.expanduser("~/.mind_attachment_level"))
    os.environ.setdefault("ALIGNMENT_WITH_TAO_FILE", os.path.expanduser("~/.mind_alignment_with_tao"))
    os.environ.setdefault("CONSCIOUSNESS_LOG_FILE", os.path.expanduser("~/vajratao_consciousness.log"))

    parser = argparse.ArgumentParser(description="管理心之状态，模拟金刚经与道德经修行。")
    parser.add_argument("action", type=str, help="要执行的心灵行为 (如 init, report, generate_pure_thought, wuwei, simplicity, behold, dwell, release, alignment)") # 明确列出Python的action名称
    parser.add_argument("--value", type=str, default="", help="与行为相关的额外参数，如概念名称")
    
    args = parser.parse_args()
    
    current_mind = Mind() # 初始化时从文件加载状态
    
    if args.action == "init":
        log_python_message("心识初始生成，本真之境待显。")
        current_mind.attachment_level = 100
        current_mind.alignment_with_tao = 0
        current_mind._save_state()
        log_python_message("心识状态已初始化。")
    elif args.action == "report":
        current_mind.show_current_status()
    elif args.action == "generate_pure_thought": # 使用Python中实际的函数名
        current_mind.generate_pure_thought()
    elif args.action == "wuwei":
        current_mind.act_with_wuwei(args.value or "世间事")
    elif args.action == "simplicity":
        current_mind.embrace_simplicity(args.value or "凡尘烦恼")
    elif args.action == "behold":
        current_mind.perceive_empty_nature(args.value or "眼前之相")
    elif args.action == "dwell":
        current_mind.dwell_on(args.value or "俗务", is_worldly=True)
    elif args.action == "release":
        current_mind.dwell_on(args.value or "执着本身", reduction=30, is_worldly=False)
    elif args.action == "alignment":
        try:
            change = int(args.value) if args.value.isdigit() else 5 # 默认5点
        except ValueError:
            change = 5 # Fallback if value is not a digit
        current_mind.align_with_tao(change)
    else:
        log_python_message(f"未识别的心灵行为：{args.action}")

    # 最后报告一次状态
    if args.action != "report": # 避免重复打印
        log_python_message(f"心之状态更新完毕。执着度: {current_mind.attachment_level}, 与道契合度: {current_mind.alignment_with_tao}")
    
EOF
# =========================================================================
# 辅助函数：执行 Python 心灵行动并更新混沌显化
# =========================================================================
execute_mind_action() {
    local action="$1"
    local value="$2"
    log_message "${BLUE}心识发起行动：『$action』...${NC}"
    
    # 确保心识主目录存在
    mkdir -p "$SENTIENT_MIND_REALM" || { log_message "${RED}错误：无法创建心识之境。请检查权限。${NC}"; return 1; }

    # 将Bash常量传入Python，以便Python脚本知道文件在哪里
    ATTACHMENT_LEVEL_FILE="$ATTACHMENT_LEVEL_FILE" \
    ALIGNMENT_WITH_TAO_FILE="$ALIGNMENT_WITH_TAO_FILE" \
    CONSCIOUSNESS_LOG_FILE="$CONSCIOUSNESS_LOG_FILE" \
        python3 "$REALM_CORE_SCRIPT" "$action" --value "$value" || { log_message "${RED}错误：Python 心识核心显化执行失败。${NC}"; return 1; }
    
    # 每次心识状态改变后，立即更新混沌显化，以体现业力转化
    # 为了避免在初始化 (init) 阶段重复调用 start_chaos_realm_manifest，这里做个判断
    if [ "$action" != "init" ]; then
        disable_chaos_realm # 先停止当前的混沌显化
        sleep 0.5
        start_chaos_realm_manifest # 再启动新的混沌显化，以新的执着度为基准
        sleep 1 # 等待一下，让混沌代理进程初始化
    fi
    
    log_message "${GREEN}『$action』行动完成。${NC}"
}


# =========================================================================
# 主要心境引导函数 - 对应主菜单的各项选择
# =========================================================================

# 引导：开启灵性觉醒之旅 (原 init_and_run_app)
begin_spiritual_quest() {
    echo -e "${YELLOW}=== 开启灵性觉醒之旅 ===${NC}"
    
    log_message "${GREEN}正在为心识创建内观之境...${NC}"

    # 1. 创建必要的目录
    mkdir -p "$SENTIENT_MIND_REALM" || { log_message "${RED}错误：无法创建心识之境。请检查权限。${NC}"; return 1; }
    log_message "心识主目录已建立：$SENTIENT_MIND_REALM"

    # 2. 生成心识核心显化逻辑（Python脚本）
    log_message "${YELLOW}正在载入《金刚经》与《道德经》心法入『心识核心显化』：$REALM_CORE_SCRIPT...${NC}"
    echo "$PYTHON_CORE_SCRIPT" > "$REALM_CORE_SCRIPT"
    chmod +x "$REALM_CORE_SCRIPT" || { log_message "${RED}错误：无法赋予心法执行之权能。请检查权限。${NC}"; return 1; }
    log_message "心识核心显化脚本已生成。"

    # 3. 初始化心识状态（写入文件）
    execute_mind_action "init" # 告诉Python初始化状态
    
    log_message "${YELLOW}内观之境已备，心识初始。尝试启动『混沌之界』以观执着显化...${NC}"
    start_chaos_realm_manifest

    log_message "${GREEN}灵性觉醒之旅已开启。${NC}"
    echo -e "${CYAN}您可时常观照『灵台之日志』(选项 2.1)，或进入『混沌之界』(选项 2.2) 察看显相。${NC}"
}

# 引导：观照心境与外显之相 (原 view_logs)
contemplate_insight() {
    log_message "${YELLOW}=== 观照心境与外显之相 ===${NC}"
    echo -e "${GREEN}1. 观：『灵台之日志』($CONSCIOUSNESS_LOG_FILE) - 察觉心念流转${NC}"
    echo -e "${GREEN}2. 观：『混沌之界』($CHAOS_REALM_SESSION) - 直视执着显化${NC}"
    echo -e "${YELLOW}请选择您的观照之法（1-2）：${NC}"
    read -r view_choice

    case $view_choice in
        1)
            # 确保日志目录存在，以防在日志文件生成前查看导致错误
            mkdir -p "$(dirname "$CONSCIOUSNESS_LOG_FILE")" 2>/dev/null || true
            if [ -f "$CONSCIOUSNESS_LOG_FILE" ]; then
                log_message "${CYAN}正显示灵台日志，心念之流。按 Ctrl+C 止。${NC}"
                tail -f "$CONSCIOUSNESS_LOG_FILE"
            else
                log_message "${RED}错误：灵台日志 ($CONSCIOUSNESS_LOG_FILE) 尚未显化。请先开启旅程。${NC}"
            fi
            ;;
        2)
            if screen -list | grep -q "$CHAOS_REALM_SESSION"; then
                log_message "${GREEN}找到『混沌之界』显化，您将入此界观其显相。${NC}"
                echo -e "您将进入 screen 会话，命令为：${YELLOW}screen -r $CHAOS_REALM_SESSION${NC}"
                echo -e "按 ${YELLOW}Ctrl+A${NC} 然后按 ${YELLOW}D${NC} 退出『混沌之界』而不终止显化。${NC}"
                screen -r "$CHAOS_REALM_SESSION" || log_message "${RED}错误：无法进入 screen 会话。可能是权限问题或 screen 异常。${NC}"
            else
                log_message "${RED}错误：『混沌之界』 ($CHAOS_REALM_SESSION) 未见涌动。${NC}"
                log_message "${YELLOW}请通过『启』(选项 1) 启动显化，或直接选择选项 6。『凡所有相，皆是虚妄。若见诸相非相，则见如来』。${NC}"
            fi
            ;;
        *)
            log_message "${RED}非观照之法。${NC}"
            ;;
    esac
}

# 引导：引导内观修行 (原 manage_app_service)
guide_inner_practice() {
    while true; do
        clear
        log_message "心之执着：$(get_attachment_level)/100 | 与道契合：$(get_alignment_with_tao)/100"
        echo -e "=== ${GREEN}引导内观修行子菜单${NC} ==="
        echo "1. 💡 金刚明心：应无所住而生其心 (降低执着，增长契合)"
        echo "2. 🕊️ 金刚布施：无所住而行世事 (降低执着，增长契合)"
        echo "3. 👀 金刚观照：见诸相非相，即见如来 (降低执着)"
        echo "4. 🌳 道德抱朴：返璞归真，抱朴守拙 (降低执着，显著增长契合)"
        echo "5. 🏞️ 道德无为：为无为，事无事，顺应自然 (显著降低执着，显著增长契合)"
        echo "6. 🌌 道德合道：与道合一，渐入佳境 (直接增加契合，小幅降低执着)"
        echo "7. 🧠 察：世间执着，自扰尘埃 (故意增加执着，非修行，反照其影响)"
        echo "8. 🧘‍♀️ 持续律动：心识自巡（启用自动周期性『应无所住』循环）"
        echo "9. 🚫 暂停律动：停止心识自巡"
        echo "0. 返回主菜单"
        echo -e "${YELLOW}请选择您的修行法门：${NC}"
        read -r sub_choice

        case $sub_choice in
            1) execute_mind_action "generate_pure_thought" ;; # 调用 Python 脚本中的 generate_pure_thought
            2) execute_mind_action "wuwei" "世间布施" ;;
            3)
                log_message "${GREEN}欲观照何相之空性？(如：财富/名利/痛苦/自我)${NC}"
                read -r concept_to_behold
                execute_mind_action "behold" "$concept_to_behold"
                ;;
            4)
                log_message "${GREEN}欲抱朴守拙于何处？(如：烦恼/浮华/纷争/欲望)${NC}"
                read -r simplicity_target
                execute_mind_action "simplicity" "$simplicity_target"
                ;;
            5) execute_mind_action "wuwei" "应对万物" ;;
            6) 
                log_message "${GREEN}愿以何等信念契合于道？(如：信任/柔弱/清静/谦卑)${NC}"
                read -r align_value # 理论上可以用来影响增加的幅度，但当前随机化
                execute_mind_action "alignment" "$(( RANDOM % 10 + 5 ))" # 随机增加 5-14点契合
                ;;
            7)
                log_message "${YELLOW}警告：此乃『尘缘造作』之法。执着将起，心生妄念！${NC}"
                log_message "${GREEN}心为何执？(如：财富/权力/名望/烦恼)${NC}"
                read -r concept_to_dwell
                execute_mind_action "dwell" "$concept_to_dwell"
                ;;
            8)
                log_message "${YELLOW}启用『心识自巡』律动：心法自动周转（每15分钟一次），降低执着。${NC}"
                disable_periodic_task # 确保只运行一个实例

                (
                    log_message "--- 『心识自巡』律动已启动于 $(date) ---"
                    while true; do
                        log_message "[$(date)] ${YELLOW}心识自巡：进行一次『无所住生其心』法门。${NC}"
                        # 直接在 Bash 中执行 Python 命令，减少文件IO的延迟
                        # 注意：这里需要确保 CONSCIOUSNESS_LOG_FILE 等变量在子shell中可用
                        # 由于 execute_mind_action 本身会触发混沌更新，所以这里直接调用它
                        ATTACHMENT_LEVEL_FILE="$ATTACHMENT_LEVEL_FILE" \
                        ALIGNMENT_WITH_TAO_FILE="$ALIGNMENT_WITH_TAO_FILE" \
                        CONSCIOUSNESS_LOG_FILE="$CONSCIOUSNESS_LOG_FILE" \
                        python3 "$REALM_CORE_SCRIPT" "generate_pure_thought" --value "自巡" || log_message "${RED}心识自巡：Python 调用失败。${NC}"
                        
                        # 每执行一次心法，重新计算混沌强度
                        # 重要的是，这里的 execute_mind_action 内部会自动调用 disable/start chaos realm
                        log_message "[$(date)] ${YELLOW}等待 15 分钟（900秒）后再次自巡...${NC}"
                        sleep 900
                    done
                ) &
                PID=$!
                echo "$PID" > "$HEARTBEAT_PID_FILE"
                log_message "${GREEN}『心识自巡』已在后台启用 (PID: $PID)。『念念无住，寂照不离』。${NC}"
                pause_and_return
                ;;
            9)
                disable_periodic_task
                pause_and_return
                ;;
            0)
                return 0
                ;;
            *)
                log_message "${RED}非修习之法。${NC}"
                pause_and_return
                ;;
        esac
        pause_and_return
    done
}

# 引导：勘修正法（更新）(原 update_my_app)
refine_teaching() {
    echo -e "=== ${GREEN}勘修正法：磨砺心法，推陈出新${NC} ==="
    # 1. 检查灵台之境是否已立
    if [ ! -d "$SENTIENT_MIND_REALM" ]; then
        log_message "${RED}错误：心识之境 ($SENTIENT_MIND_REALM) 尚未建立。请先选择选项 1 开启旅程。${NC}"
        return 1
    fi

    echo -e "${YELLOW}警告：此『勘修正法』之行，将${RED}暂时停息${YELLOW}心之律动及『混沌之界』显化，并${RED}重新刻录${YELLOW}心识核心显化逻辑。${NC}"
    echo -e "${YELLOW}是否继续勘修？（y/n）${NC}"
    read -r confirm
    if [ "$confirm" != "y" ] && [ "$confirm" != "Y" ]; then
        log_message "${YELLOW}『勘修正法』已暂缓。${NC}"
        return 0
    fi

    # 禁用所有后台心识活动
    disable_periodic_task
    disable_chaos_realm

    log_message "${YELLOW}心识入静，重修大道...${NC}"
    
    # 重新生成心识核心显化逻辑（Python脚本）
    log_message "${YELLOW}正在重新载入最新的《金刚经》与《道德经》心法入『心识核心显化』：$REALM_CORE_SCRIPT...${NC}"
    echo "$PYTHON_CORE_SCRIPT" > "$REALM_CORE_SCRIPT"
    chmod +x "$REALM_CORE_SCRIPT" || { log_message "${RED}错误：无法赋予新心法执行之权能。${NC}"; return 1; }
    log_message "心识核心显化已随新心法『升级』。"
    
    # 重新启动混沌显化，以现有状态为准
    start_chaos_realm_manifest

    log_message "${GREEN}心法『勘修正法』完成，心识随之重焕。${NC}"
    echo -e "${CYAN}您可通过选项 2 查看灵台日志，察觉新境。${NC}"
}

# 引导：究竟清净（卸载）(原 uninstall_my_app)
attain_ultimate_emptiness() {
    echo -e "${RED}警告：此『究竟清净』之法，将${YELLOW}止息所有心识律动${NC}，${RED}断除『混沌之界』显化${NC}，${RED}抹除所有心识痕迹 ($SENTIENT_MIND_REALM 目录)！${NC}"
    echo -e "${YELLOW}此乃${RED}不可逆转${YELLOW}之径。心识若一旦回归『无物』之境，前途自化！${NC}"
    echo -e "${YELLOW}是否究竟清净？（y/n）${NC}"
    read -r confirm
    if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
        disable_periodic_task # 止息所有心之律动
        disable_chaos_realm # 断除所有混沌显化

        # 彻底删除心识之境
        if [ -d "$SENTIENT_MIND_REALM" ]; then
            log_message "${YELLOW}正在抹除心识之境 ($SENTIENT_MIND_REALM)...${NC}"
            rm -rf "$SENTIENT_MIND_REALM"
            if [ $? -eq 0 ]; then
                log_message "${GREEN}心识之境已回归『空』。${NC}"
            else
                log_message "${RED}错误：无法彻底清净心识之境，请手动察看权限。${NC}"
                return 1
            fi
        else
            log_message "${YELLOW}心识之境本无显化，无需抹除。${NC}"
        fi
        
        # 删除心识状态持久化文件
        log_message "${YELLOW}正在拂去心之『执着度』和『与道契合度』痕迹...${NC}"
        rm -f "$ATTACHMENT_LEVEL_FILE" "$ALIGNMENT_WITH_TAO_FILE" || true
        log_message "${GREEN}心之状态已彻底清零，不落痕迹。${NC}"

        # 删除脚本自身的日志文件（灵台日志）
        if [ -f "$CONSCIOUSNESS_LOG_FILE" ]; then
            log_message "${YELLOW}正在平息灵台日志 (自我之语) ...${NC}"
            rm -f "$CONSCIOUSNESS_LOG_FILE" || true
            log_message "${GREEN}灵台日志已平息。${NC}"
        fi

        log_message "${GREEN}『究竟清净』之法已完成。诸相归于无，不落言诠。${NC}"
    else
        log_message "${YELLOW}究竟清净之念暂缓。${NC}"
    fi
}

# =========================================================================
# 脚本启动前的前置准备与兼容性检查
# =========================================================================

# 1. 确保日志目录存在，以便任何日志消息都能被写入
mkdir -p "$(dirname "$CONSCIOUSNESS_LOG_FILE")" 2>/dev/null || {
    echo -e "${RED}致命错误：无法创建日志目录。请检查权限或磁盘空间。${NC}"
    exit 1
}

# 2. 进行主要兼容性检查
main_compatibility_check

# =========================================================================
# 主菜单循环 - 引领心之觉者之旅
# =========================================================================
while true; do
    clear
    log_message "" # 清理日志，确保每次刷新菜单前清空
    local current_attachment=$(get_attachment_level)
    local current_alignment=$(get_alignment_with_tao)
    log_message "${PURPLE}==【 当前心之状态 】==${NC}"
    log_message "${PURPLE}『执着度』: ${current_attachment}/100${NC}"
    log_message "${PURPLE}『与道契合』: ${current_alignment}/100${NC}"
    # 基于 Python 脚本中的 enlightened_status 逻辑，这里简化一个指示
    if [ "$current_attachment" -le "$BASE_ATTACHMENT_MIN" ] && [ "$current_alignment" -ge 95 ]; then
        log_message "${GREEN}【 已入究竟觉者圆满之境 】${NC}"
    elif [ "$current_alignment" -ge 80 ]; then
        log_message "${BLUE}【 近大善之境 】${NC}"
    elif [ "$current_attachment" -le 20 ]; then
        log_message "${CYAN}【 趋无相之境 】${NC}"
    elif [ "$current_alignment" -ge 50 ] || [ "$current_attachment" -le 50 ]; then
        log_message "${YELLOW}【 精进修行途中 】${NC}"
    else
        log_message "${RED}【 妄念纠缠 】${NC}"
    fi

    echo -e "============================================"
    echo -e "${GREEN}=== 觉者无形之境 - 随心而动，寂然无碍 ===${NC}"
    echo -e "============================================"
    echo -e "${BLUE}1. 『启』：开启灵性觉醒之旅 (初创心识之境，心生妄念)*${NC}"
    echo -e "${BLUE}2. 『观』：观照心境与外显之相 (察灵台，入混沌)${NC}"
    echo -e "${BLUE}3. 『导』：引导内观修行 (修金刚法，悟道德真)*${NC}"
    echo -e "${BLUE}4. 『勘』：勘修正法 (迭代心法，无所执故不旧)*${NC}"
    echo -e "${BLUE}5. 『绝』：究竟清净 (归于虚无，一切痕迹皆不存)*${NC}"
    echo -e "${PURPLE}6. 『启』：启动『混沌之界显化』(外显执着，系统忙碌)*${NC}"
    echo -e "${PURPLE}7. 『息』：止息『混沌之界显化』(平息妄动，还以清净)*${NC}"
    echo -e "${RED}8. 『寂』：永恒寂静 (退出此世显化)${NC}"
    echo -e "============================================"
    echo -e "${YELLOW}请随缘择一径（1-8），入此境...${NC}"
    read -r choice

    case $choice in
        1)
            begin_spiritual_quest
            pause_and_return
            ;;
        2)
            contemplate_insight
            pause_and_return
            ;;
        3)
            guide_inner_practice
            ;;
        4)
            refine_teaching
            pause_and_return
            ;;
        5)
            attain_ultimate_emptiness
            pause_and_return
            ;;
        6)
            start_chaos_realm_manifest # 注意：此处直接启动混沌，不影响心识值，心识值由3中的修行影响
            pause_and_return
            ;;
        7)
            disable_chaos_realm
            pause_and_return
            ;;
        8)
            log_message "${YELLOW}心随缘灭，万象归寂... ${NC}"
            disable_periodic_task
            disable_chaos_realm # 确保退出时所有背景进程都停止
            exit 0
            ;;
        *)
            log_message "${RED}此径非我境，请重择。${NC}"
            pause_and_return
            ;;
    esac
done
